<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:qc="http://QuickConverter.CodePlex.com/"
                    xmlns:m="http://metro.mahapps.com/winfx/xaml/controls"
                    xmlns:mi="http://metro.mahapps.com/winfx/xaml/iconpacks"
                    xmlns:ge="clr-namespace:SourceChord.GridExtra;assembly=GridExtra.Wpf"
                    xmlns:a="http://icsharpcode.net/sharpdevelop/avalonedit"
                    xmlns:ac="clr-namespace:ICSharpCode.AvalonEdit.CodeCompletion;assembly=ICSharpCode.AvalonEdit"
                    xmlns:models="clr-namespace:MyPad.Models"
                    xmlns:components="clr-namespace:MyPad.Views.Components">

    <Style x:Key="Default.TextView" TargetType="{x:Type a:TextView}">
        <Setter Property="LinkTextForegroundBrush" Value="{DynamicResource AccentBaseColorBrush}"/>
        <Setter Property="CurrentLineBackground" Value="{DynamicResource AccentColorBrush4}"/>
        <Setter Property="CurrentLineBorder">
            <Setter.Value>
                <Pen Brush="{DynamicResource AccentColorBrush3}"/>
            </Setter.Value>
        </Setter>
        <!-- ここで ColumnRulerPen は定義できない -->
    </Style>

    <Style x:Key="Default.TextArea" TargetType="{x:Type a:TextArea}" BasedOn="{StaticResource {x:Type a:TextArea}}">
        <Setter Property="SelectionBrush" Value="{DynamicResource HighlightBrush}"/>
        <Setter Property="SelectionBorder" Value="{x:Null}"/>
        <Setter Property="SelectionForeground" Value="{x:Null}"/>
        <Setter Property="SelectionCornerRadius" Value="0"/>
    </Style>

    <Style x:Key="Default.TextEditor" TargetType="{x:Type a:TextEditor}" BasedOn="{StaticResource {x:Type a:TextEditor}}">
        <Setter Property="Foreground" Value="{DynamicResource TextBrush}"/>
        <Setter Property="Background" Value="{DynamicResource LightBackground}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource LightBackground}"/>
        <Setter Property="VerticalScrollBarVisibility" Value="Visible"/>
        <Setter Property="HorizontalScrollBarVisibility" Value="Visible"/>
    </Style>

    <Style x:Key="Default.CompletionWindow" TargetType="{x:Type ac:CompletionWindow}">
        <Setter Property="ResizeMode" Value="NoResize"/>
        <Setter Property="WindowStyle" Value="None"/>
        <Setter Property="AllowsTransparency" Value="True"/>
        <Setter Property="Opacity" Value="{StaticResource Const.Opacity1}"/>
        <Style.Resources>
            <Style TargetType="{x:Type ac:CompletionListBox}" BasedOn="{StaticResource Default.ListBox}">
                <Setter Property="Background" Value="Transparent"/>
                <Setter Property="BorderBrush" Value="{DynamicResource GrayBrush2}"/>
                <Setter Property="BorderThickness" Value="1"/>
                <Setter Property="ItemContainerStyle" Value="{StaticResource Default.ListBoxItem}"/>
            </Style>
        </Style.Resources>
    </Style>

    <Style x:Key="Default.SearchPanel" TargetType="{x:Type a:SearchPanel}">
        <!-- ここで MarkerBrush は定義できない -->
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type a:SearchPanel}">
                    <Border Background="{DynamicResource BackgroundNormal}" BorderBrush="{DynamicResource AccentBaseColorBrush}" Opacity="{StaticResource Const.Opacity1}" VerticalAlignment="Top" HorizontalAlignment="Right" BorderThickness="0,0,0,2" Padding="3">
                        <Grid ge:GridEx.ColumnDefinition="Auto, 3, *, 3, Auto, Auto, 3, Auto, Auto, 3, Auto">
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="{qc:Binding '$P ? double.NaN : 0', P={Binding (components:TextArea.SearchPanelExpand), Mode=OneWay}}"/>
                                <RowDefinition Height="{qc:Binding '$P ? double.NaN : 0', P={Binding (components:TextArea.SearchPanelExpand), Mode=OneWay}}"/>
                            </Grid.RowDefinitions>

                            <Grid.Resources>
                                <Style TargetType="{x:Type TextBox}" BasedOn="{StaticResource Default.TextBox}">
                                    <Setter Property="FontFamily" Value="{Binding FontFamily, RelativeSource={RelativeSource AncestorType={x:Type Window}}, Mode=OneWay}"/>
                                    <Setter Property="FontSize" Value="{Binding FontSize, RelativeSource={RelativeSource AncestorType={x:Type Window}}, Mode=OneWay}"/>
                                    <Setter Property="MinWidth" Value="150"/>
                                </Style>
                                <Style TargetType="{x:Type Button}" BasedOn="{StaticResource Default.Button}">
                                    <Setter Property="Background" Value="{x:Null}"/>
                                    <Setter Property="BorderBrush" Value="{x:Null}"/>
                                    <Setter Property="Width" Value="20"/>
                                    <Setter Property="Height" Value="20"/>
                                    <Setter Property="Padding" Value="2"/>
                                </Style>
                                <Style TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource Default.ToggleButton}">
                                    <Setter Property="Background" Value="{x:Null}"/>
                                    <Setter Property="BorderBrush" Value="{x:Null}"/>
                                    <Setter Property="Width" Value="20"/>
                                    <Setter Property="Height" Value="20"/>
                                    <Setter Property="Padding" Value="2"/>
                                    <Style.Triggers>
                                        <MultiTrigger>
                                            <MultiTrigger.Conditions>
                                                <Condition Property="IsChecked" Value="True"/>
                                                <Condition Property="IsPressed" Value="False"/>
                                            </MultiTrigger.Conditions>
                                            <Setter Property="Background" Value="{DynamicResource BackgroundSelected}"/>
                                        </MultiTrigger>
                                    </Style.Triggers>
                                </Style>
                            </Grid.Resources>

                            <ToggleButton Grid.Row="0" Grid.Column="0" x:Name="ExpandButton" IsChecked="{Binding (components:TextArea.SearchPanelExpand), Mode=TwoWay}" ToolTip="{qc:MultiBinding '$P0 ? $P1 : $P2', P0={Binding (components:TextArea.SearchPanelExpand)}, P1={Binding Resources.Command_SwitchToFindMode, Source={x:Static models:ResourceService.Instance}, Mode=OneWay}, P2={Binding Resources.Command_SwitchToReplaceMode, Source={x:Static models:ResourceService.Instance}, Mode=OneWay}}">
                                <mi:Material Kind="ChevronDown"/>
                            </ToggleButton>
                            
                            <TextBox Grid.Row="0" Grid.Column="2" x:Name="PART_searchTextBox" Text="{Binding SearchPattern, RelativeSource={RelativeSource TemplatedParent}, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}" m:TextBoxHelper.Watermark="{Binding Resources.Command_Find, Source={x:Static models:ResourceService.Instance}, Mode=OneWay}"/>
                            <Button Grid.Row="0" Grid.Column="4" Command="a:SearchCommands.FindPrevious" ToolTip="{Binding Resources.Command_FindPrev, Source={x:Static models:ResourceService.Instance}, Mode=OneWay}">
                                <mi:Modern Kind="MagnifyArrowUp"/>
                            </Button>
                            <Button Grid.Row="0" Grid.Column="5" Command="a:SearchCommands.FindNext" ToolTip="{Binding Resources.Command_FindNext, Source={x:Static models:ResourceService.Instance}, Mode=OneWay}">
                                <mi:Modern Kind="MagnifyArrowDown"/>
                            </Button>
                            <ToggleButton Grid.Row="0" Grid.Column="7" IsChecked="{Binding MatchCase, RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}" ToolTip="{Binding Resources.Command_CaseSensitive, Source={x:Static models:ResourceService.Instance}, Mode=OneWay}">
                                <mi:Material Kind="CaseSensitiveAlt"/>
                            </ToggleButton>
                            <ToggleButton Grid.Row="0" Grid.Column="8" IsChecked="{Binding UseRegex, RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}" ToolTip="{Binding Resources.Command_UseRegex, Source={x:Static models:ResourceService.Instance}, Mode=OneWay}">
                                <mi:Material Kind="Regex"/>
                            </ToggleButton>
                            <Button Grid.Row="0" Grid.Column="10" Command="a:SearchCommands.CloseSearchPanel" ToolTip="{Binding Resources.Command_Close, Source={x:Static models:ResourceService.Instance}, Mode=OneWay}" IsTabStop="False">
                                <mi:Material Kind="Close"/>
                            </Button>

                            <Border Grid.Row="1" Grid.Column="0" Height="3"/>

                            <TextBox Grid.Row="2" Grid.Column="2" Text="{Binding (components:TextArea.ReplacePattern), UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}" m:TextBoxHelper.Watermark="{Binding Resources.Command_Replace, Source={x:Static models:ResourceService.Instance}, Mode=OneWay}"/>
                            <Button Grid.Row="2" Grid.Column="4" Command="components:TextEditorCommands.ReplaceNext" ToolTip="{Binding Resources.Command_ReplaceNext, Source={x:Static models:ResourceService.Instance}, Mode=OneWay}">
                                <mi:Material Kind="FindReplace"/>
                            </Button>
                            <Button Grid.Row="2" Grid.Column="5" Command="components:TextEditorCommands.ReplaceAll" ToolTip="{Binding Resources.Command_ReplaceAll, Source={x:Static models:ResourceService.Instance}, Mode=OneWay}">
                                <mi:Modern Kind="Refresh"/>
                            </Button>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="components:TextArea.SearchPanelExpand" Value="True">
                            <Setter TargetName="ExpandButton" Property="Content">
                                <Setter.Value>
                                    <mi:Material Kind="ChevronUp"/>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type components:TextView}"         BasedOn="{StaticResource Default.TextView}"/>
    <Style TargetType="{x:Type components:TextArea}"         BasedOn="{StaticResource Default.TextArea}"/>
    <Style TargetType="{x:Type components:TextEditor}"       BasedOn="{StaticResource Default.TextEditor}"/>
    <Style TargetType="{x:Type components:CompletionWindow}" BasedOn="{StaticResource Default.CompletionWindow}"/>
    <Style TargetType="{x:Type a:SearchPanel}"               BasedOn="{StaticResource Default.SearchPanel}"/>

</ResourceDictionary>