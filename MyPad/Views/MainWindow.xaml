<m:MetroWindow x:Class="MyPad.Views.MainWindow"
               xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
               xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
               xmlns:o="http://schemas.microsoft.com/winfx/2006/xaml/presentation/options"
               xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
               xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
               xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
               xmlns:ei="http://schemas.microsoft.com/expression/2010/interactions"
               xmlns:s="clr-namespace:System;assembly=mscorlib"
               xmlns:p="http://prismlibrary.com/"
               xmlns:m="http://metro.mahapps.com/winfx/xaml/controls"
               xmlns:mi="http://metro.mahapps.com/winfx/xaml/iconpacks"
               xmlns:qc="http://QuickConverter.CodePlex.com/"
               xmlns:ge="clr-namespace:SourceChord.GridExtra;assembly=GridExtra.Wpf"
               xmlns:dr="clr-namespace:Dragablz;assembly=Dragablz"
               xmlns:ae="http://icsharpcode.net/sharpdevelop/avalonedit"
               xmlns:ml="clr-namespace:MyLib;assembly=MyLib"
               xmlns:mlwb="clr-namespace:MyLib.Wpf.Behaviors;assembly=MyLib.Wpf"
               xmlns:mlwi="clr-namespace:MyLib.Wpf.Interactions;assembly=MyLib.Wpf"
               xmlns:mlwm="clr-namespace:MyLib.Wpf.Markup;assembly=MyLib.Wpf"
               xmlns:root="clr-namespace:MyPad"
               xmlns:models="clr-namespace:MyPad.Models"
               xmlns:viewModels="clr-namespace:MyPad.ViewModels"
               xmlns:views="clr-namespace:MyPad.Views"
               xmlns:behaviors="clr-namespace:MyPad.Views.Behaviors"
               xmlns:components="clr-namespace:MyPad.Views.Components"
               mc:Ignorable="d"
               p:ViewModelLocator.AutoWireViewModel="False"
               Style="{StaticResource Common.Window}"
               Title="{qc:MultiBinding '($P0 ? \'\[R\/O\] \' : null) + ($P1 ? $P2 : Path.GetFileName($P2)) + ($P3 ? \'*\' : null) + \' \- \' + $P4',
                       P0={Binding ActiveEditor.IsReadOnly, Mode=OneWay},
                       P1={Binding System.ShowFullName, Source={x:Static models:SettingsService.Instance}, Mode=OneWay},
                       P2={Binding ActiveEditor.FileName, Mode=OneWay},
                       P3={Binding ActiveEditor.IsModified, Mode=OneWay},
                       P4={Binding Source={x:Static ml:ProductInfo.Product}, Mode=OneWay}}"
               AllowDrop="True" WindowStartupLocation="CenterScreen" Height="625" Width="1000"
               DataContextChanged="Window_DataContextChanged"
               Loaded="Window_Loaded"
               Closed="Window_Closed">
    
    <!-- ビヘイビア -->
    <i:Interaction.Behaviors>
        <mlwb:WindowBehavior AdjustSizeOnRendered="True" DataContextDisposeOnDetaching="True"/>
    </i:Interaction.Behaviors>

    <!-- トリガー -->
    <i:Interaction.Triggers>
        <p:InteractionRequestTrigger SourceObject="{Binding MessageRequest, Mode=OneTime}">
            <behaviors:MessageActionEx UseOverlayMessage="{Binding System.UseOverlayMessage, Source={x:Static models:SettingsService.Instance}, Mode=OneWay}"/>
        </p:InteractionRequestTrigger>
        <p:InteractionRequestTrigger SourceObject="{Binding OpenFileRequest, Mode=OneTime}">
            <behaviors:OpenFileActionEx Filter="{x:Static root:Consts.FILE_FILTER}" DefaultExtension="{x:Static root:Consts.DEFAULT_EXTENSION}" Multiselect="True"/>
        </p:InteractionRequestTrigger>
        <p:InteractionRequestTrigger SourceObject="{Binding SaveFileRequest, Mode=OneTime}">
            <behaviors:SaveFileActionEx Filter="{x:Static root:Consts.FILE_FILTER}" DefaultExtension="{x:Static root:Consts.DEFAULT_EXTENSION}"/>
        </p:InteractionRequestTrigger>
        <p:InteractionRequestTrigger SourceObject="{Binding PrintRequest, Mode=OneTime}">
            <mlwi:PrintDocumentAction/>
        </p:InteractionRequestTrigger>
        <p:InteractionRequestTrigger SourceObject="{Binding TransitionRequest, Mode=OneTime}">
            <mlwi:TransitionAction/>
        </p:InteractionRequestTrigger>
        <i:EventTrigger EventName="Activated">
            <p:InvokeCommandAction Command="{Binding ActivatedHandler, Mode=OneTime}"/>
        </i:EventTrigger>
        <i:EventTrigger EventName="Drop">
            <mlwb:InvokeWindowAction Transition="Activate"/>
            <p:InvokeCommandAction Command="{Binding DropHandler, Mode=OneTime}"/>
        </i:EventTrigger>
        <i:EventTrigger EventName="Closing">
            <p:InvokeCommandAction Command="{Binding ClosingHandler, Mode=OneTime}"/>
        </i:EventTrigger>
        <ei:KeyTrigger ActiveOnFocus="True" Key="P" Modifiers="Ctrl">
            <ei:ChangePropertyAction TargetName="PrintFlyout" PropertyName="IsOpen" Value="True"/>
        </ei:KeyTrigger>
        <ei:KeyTrigger ActiveOnFocus="True" Key="G" Modifiers="Ctrl">
            <ei:ChangePropertyAction TargetName="GoToLineFlyout" PropertyName="IsOpen" Value="True"/>
        </ei:KeyTrigger>
        <ei:KeyTrigger ActiveOnFocus="True" Key="OemComma" Modifiers="Ctrl">
            <ei:ChangePropertyAction TargetName="OptionsFlyout" PropertyName="IsOpen" Value="True"/>
        </ei:KeyTrigger>
    </i:Interaction.Triggers>

    <!-- リソース -->
    <Window.Resources>
        <mlwm:BindingProxy x:Key="Proxy" Data="{Binding Mode=OneWay}"/>
        <Style TargetType="{x:Type Menu}" BasedOn="{StaticResource Default.Menu}">
            <Setter Property="Visibility" Value="{qc:Binding '$P ? Visibility.Visible : Visibility.Collapsed', P={Binding System.ShowMenuBar, Source={x:Static models:SettingsService.Instance}, Mode=OneWay}}"/>
        </Style>
        <Style TargetType="{x:Type ToolBar}" BasedOn="{StaticResource Default.ToolBar}">
            <Setter Property="Visibility" Value="{qc:Binding '$P ? Visibility.Visible : Visibility.Collapsed', P={Binding System.ShowToolBar, Source={x:Static models:SettingsService.Instance}, Mode=OneWay}}"/>
        </Style>
        <Style TargetType="{x:Type m:HamburgerMenu}" BasedOn="{StaticResource Default.HamburgerMenu}">
            <Setter Property="Visibility" Value="{qc:Binding '$P ? Visibility.Visible : Visibility.Collapsed', P={Binding System.ShowSideBar, Source={x:Static models:SettingsService.Instance}, Mode=OneWay}}"/>
        </Style>
        <Style TargetType="{x:Type StatusBar}" BasedOn="{StaticResource Default.StatusBar}">
            <Setter Property="Visibility" Value="{qc:Binding '$P ? Visibility.Visible : Visibility.Collapsed', P={Binding System.ShowStatusBar, Source={x:Static models:SettingsService.Instance}, Mode=OneWay}}"/>
        </Style>
    </Window.Resources>

    <!-- ウィンドウコマンド(左) -->
    <m:MetroWindow.LeftWindowCommands>
        <m:WindowCommands Margin="0,2,0,0">
            <Menu>
                <MenuItem Header="{Binding Resources.Command_File, Source={x:Static models:ResourceService.Instance}, Mode=OneWay}">
                    <MenuItem Command="{Binding AddEditorCommand, Mode=OneTime}" Header="{Binding Resources.Command_New, Source={x:Static models:ResourceService.Instance}, Mode=OneWay}" InputGestureText="Ctrl+N">
                        <MenuItem.Icon>
                            <mi:Modern Kind="PageNew"/>
                        </MenuItem.Icon>
                    </MenuItem>
                    <MenuItem Command="{Binding AddWindowCommand, Source={x:Static viewModels:WorkspaceViewModel.Instance}, Mode=OneTime}" Header="{Binding Resources.Command_NewWindow, Source={x:Static models:ResourceService.Instance}, Mode=OneWay}" InputGestureText="Ctrl+Shift+N">
                        <MenuItem.Icon>
                            <mi:Material Kind="WindowMaximize"/>
                        </MenuItem.Icon>
                    </MenuItem>
                    <MenuItem Command="{Binding OpenCommand, Mode=OneTime}" Header="{Binding Resources.Command_Open, Source={x:Static models:ResourceService.Instance}, Mode=OneWay}" HeaderStringFormat="{}{0}..." InputGestureText="Ctrl+O">
                        <MenuItem.Icon>
                            <mi:Material Kind="FolderOpen"/>
                        </MenuItem.Icon>
                    </MenuItem>
                    <MenuItem Command="{Binding SaveCommand, Mode=OneTime}" Header="{Binding Resources.Command_Save, Source={x:Static models:ResourceService.Instance}, Mode=OneWay}" InputGestureText="Ctrl+S">
                        <MenuItem.Icon>
                            <mi:Material Kind="ContentSave"/>
                        </MenuItem.Icon>
                    </MenuItem>
                    <MenuItem Command="{Binding SaveAsCommand, Mode=OneTime}" Header="{Binding Resources.Command_SaveAs, Source={x:Static models:ResourceService.Instance}, Mode=OneWay}" HeaderStringFormat="{}{0}..." InputGestureText="Ctrl+Shift+S">
                        <MenuItem.Icon>
                            <mi:Material Kind="ContentSaveSettings"/>
                        </MenuItem.Icon>
                    </MenuItem>
                    <MenuItem Command="{Binding SaveAllCommand, Mode=OneTime}" Header="{Binding Resources.Command_SaveAll, Source={x:Static models:ResourceService.Instance}, Mode=OneWay}" InputGestureText="Ctrl+Shift+K">
                        <MenuItem.Icon>
                            <mi:Material Kind="ContentSaveAll"/>
                        </MenuItem.Icon>
                    </MenuItem>
                    <MenuItem Header="{Binding Resources.Command_Print, Source={x:Static models:ResourceService.Instance}, Mode=OneWay}" HeaderStringFormat="{}{0}..." InputGestureText="Ctrl+P"
                              Click="{qc:QuickEvent '$PrintFlyout.IsOpen = true'}">
                        <MenuItem.Icon>
                            <mi:Modern Kind="PrinterText"/>
                        </MenuItem.Icon>
                    </MenuItem>
                    <Separator/>
                    <MenuItem Command="Close" Header="{Binding Resources.Command_Close, Source={x:Static models:ResourceService.Instance}, Mode=OneWay}" InputGestureText="Alt+F4">
                        <MenuItem.Icon>
                            <mi:Material Kind="Close"/>
                        </MenuItem.Icon>
                    </MenuItem>
                    <MenuItem Command="{Binding ExitApplicationCommand, Source={x:Static viewModels:WorkspaceViewModel.Instance}, Mode=OneTime}" Header="{Binding Resources.Command_ExitApplication, Source={x:Static models:ResourceService.Instance}, Mode=OneWay}" InputGestureText="Alt+Shift+F4">
                        <MenuItem.Icon>
                            <mi:Material Kind="CloseBox"/>
                        </MenuItem.Icon>
                    </MenuItem>
                </MenuItem>
                <MenuItem Header="{Binding Resources.Command_Edit, Source={x:Static models:ResourceService.Instance}, Mode=OneWay}">
                    <MenuItem Command="Undo" Header="{Binding Resources.Command_Undo, Source={x:Static models:ResourceService.Instance}, Mode=OneWay}">
                        <MenuItem.Icon>
                            <mi:Modern Kind="UndoCurve"/>
                        </MenuItem.Icon>
                    </MenuItem>
                    <MenuItem Command="Redo" Header="{Binding Resources.Command_Redo, Source={x:Static models:ResourceService.Instance}, Mode=OneWay}">
                        <MenuItem.Icon>
                            <mi:Modern Kind="RedoCurve"/>
                        </MenuItem.Icon>
                    </MenuItem>
                    <Separator/>
                    <MenuItem Command="Cut" Header="{Binding Resources.Command_Cut, Source={x:Static models:ResourceService.Instance}, Mode=OneWay}">
                        <MenuItem.Icon>
                            <mi:Modern Kind="Scissor"/>
                        </MenuItem.Icon>
                    </MenuItem>
                    <MenuItem Command="Copy" Header="{Binding Resources.Command_Copy, Source={x:Static models:ResourceService.Instance}, Mode=OneWay}">
                        <MenuItem.Icon>
                            <mi:Modern Kind="PageCopy"/>
                        </MenuItem.Icon>
                    </MenuItem>
                    <MenuItem Command="Paste" Header="{Binding Resources.Command_Paste, Source={x:Static models:ResourceService.Instance}, Mode=OneWay}">
                        <MenuItem.Icon>
                            <mi:Modern Kind="ClipboardPaste"/>
                        </MenuItem.Icon>
                    </MenuItem>
                    <MenuItem Command="EditingCommands.Delete" Header="{Binding Resources.Command_Delete, Source={x:Static models:ResourceService.Instance}, Mode=OneWay}" InputGestureText="Del">
                        <MenuItem.Icon>
                            <mi:Material Kind="Eraser"/>
                        </MenuItem.Icon>
                    </MenuItem>
                    <MenuItem Command="SelectAll" Header="{Binding Resources.Command_SelectAll, Source={x:Static models:ResourceService.Instance}, Mode=OneWay}">
                        <MenuItem.Icon>
                            <mi:Modern Kind="CursorDefault"/>
                        </MenuItem.Icon>
                    </MenuItem>
                    <Separator/>
                    <MenuItem Command="Find" Header="{Binding Resources.Command_Find, Source={x:Static models:ResourceService.Instance}, Mode=OneWay}">
                        <MenuItem.Icon>
                            <mi:Material Kind="Magnify"/>
                        </MenuItem.Icon>
                    </MenuItem>
                    <MenuItem Command="ae:SearchCommands.FindNext" Header="{Binding Resources.Command_FindNext, Source={x:Static models:ResourceService.Instance}, Mode=OneWay}">
                        <MenuItem.Icon>
                            <mi:Modern Kind="MagnifyArrowDown"/>
                        </MenuItem.Icon>
                    </MenuItem>
                    <MenuItem Command="ae:SearchCommands.FindPrevious" Header="{Binding Resources.Command_FindPrev, Source={x:Static models:ResourceService.Instance}, Mode=OneWay}">
                        <MenuItem.Icon>
                            <mi:Modern Kind="MagnifyArrowUp"/>
                        </MenuItem.Icon>
                    </MenuItem>
                    <MenuItem Command="Replace" Header="{Binding Resources.Command_Replace, Source={x:Static models:ResourceService.Instance}, Mode=OneWay}">
                        <MenuItem.Icon>
                            <mi:Material Kind="FindReplace"/>
                        </MenuItem.Icon>
                    </MenuItem>
                    <MenuItem Header="{Binding Resources.Command_GoToLine, Source={x:Static models:ResourceService.Instance}, Mode=OneWay}" HeaderStringFormat="{}{0}..." InputGestureText="Ctrl+G"
                              Click="{qc:QuickEvent '$GoToLineFlyout.IsOpen = true'}">
                        <MenuItem.Icon>
                            <mi:Modern Kind="PageArrow"/>
                        </MenuItem.Icon>
                    </MenuItem>
                    <Separator/>
                    <MenuItem Header="{Binding Resources.Command_Movement, Source={x:Static models:ResourceService.Instance}, Mode=OneWay}">
                        <MenuItem Command="EditingCommands.MoveLeftByWord"      Header="{Binding Resources.Command_MoveLeftByWord, Source={x:Static models:ResourceService.Instance}, Mode=OneWay}" InputGestureText="Ctrl+Left"/>
                        <MenuItem Command="EditingCommands.MoveRightByWord"     Header="{Binding Resources.Command_MoveRightByWord, Source={x:Static models:ResourceService.Instance}, Mode=OneWay}" InputGestureText="Ctrl+Right"/>
                        <MenuItem Command="EditingCommands.MoveToLineStart"     Header="{Binding Resources.Command_MoveToLineStart, Source={x:Static models:ResourceService.Instance}, Mode=OneWay}" InputGestureText="Home"/>
                        <MenuItem Command="EditingCommands.MoveToLineEnd"       Header="{Binding Resources.Command_MoveToLineEnd, Source={x:Static models:ResourceService.Instance}, Mode=OneWay}" InputGestureText="End"/>
                        <MenuItem Command="EditingCommands.MoveUpByPage"        Header="{Binding Resources.Command_MoveUpByPage, Source={x:Static models:ResourceService.Instance}, Mode=OneWay}" InputGestureText="PageUp"/>
                        <MenuItem Command="EditingCommands.MoveDownByPage"      Header="{Binding Resources.Command_MoveDownByPage, Source={x:Static models:ResourceService.Instance}, Mode=OneWay}" InputGestureText="PageDown"/>
                        <MenuItem Command="EditingCommands.MoveToDocumentStart" Header="{Binding Resources.Command_MoveToDocumentStart, Source={x:Static models:ResourceService.Instance}, Mode=OneWay}" InputGestureText="Ctrl+Home"/>
                        <MenuItem Command="EditingCommands.MoveToDocumentEnd"   Header="{Binding Resources.Command_MoveToDocumentEnd, Source={x:Static models:ResourceService.Instance}, Mode=OneWay}" InputGestureText="Ctrl+End"/>
                    </MenuItem>
                    <MenuItem Header="{Binding Resources.Command_Selection, Source={x:Static models:ResourceService.Instance}, Mode=OneWay}">
                        <MenuItem Command="EditingCommands.SelectLeftByWord"      Header="{Binding Resources.Command_SelectLeftByWord, Source={x:Static models:ResourceService.Instance}, Mode=OneWay}" InputGestureText="Ctrl+Shift+Left"/>
                        <MenuItem Command="EditingCommands.SelectRightByWord"     Header="{Binding Resources.Command_SelectRightByWord, Source={x:Static models:ResourceService.Instance}, Mode=OneWay}" InputGestureText="Ctrl+Shift+Right"/>
                        <MenuItem Command="EditingCommands.SelectToLineStart"     Header="{Binding Resources.Command_SelectToLineStart, Source={x:Static models:ResourceService.Instance}, Mode=OneWay}" InputGestureText="Shift+Home"/>
                        <MenuItem Command="EditingCommands.SelectToLineEnd"       Header="{Binding Resources.Command_SelectToLineEnd, Source={x:Static models:ResourceService.Instance}, Mode=OneWay}" InputGestureText="Shift+End"/>
                        <MenuItem Command="EditingCommands.SelectUpByPage"        Header="{Binding Resources.Command_SelectUpByPage, Source={x:Static models:ResourceService.Instance}, Mode=OneWay}" InputGestureText="Shift+PageUp"/>
                        <MenuItem Command="EditingCommands.SelectDownByPage"      Header="{Binding Resources.Command_SelectDownByPage, Source={x:Static models:ResourceService.Instance}, Mode=OneWay}" InputGestureText="Shift+PageDown"/>
                        <MenuItem Command="EditingCommands.SelectToDocumentStart" Header="{Binding Resources.Command_SelectToDocumentStart, Source={x:Static models:ResourceService.Instance}, Mode=OneWay}" InputGestureText="Ctrl+Shift+Home"/>
                        <MenuItem Command="EditingCommands.SelectToDocumentEnd"   Header="{Binding Resources.Command_SelectToDocumentEnd, Source={x:Static models:ResourceService.Instance}, Mode=OneWay}" InputGestureText="Ctrl+Shift+End"/>
                    </MenuItem>
                    <MenuItem Header="{Binding Resources.Command_Formatting, Source={x:Static models:ResourceService.Instance}, Mode=OneWay}">
                        <MenuItem Command="components:TextEditorCommands.ConvertToNarrow" Header="{Binding Resources.Command_ConvertToNarrow, Source={x:Static models:ResourceService.Instance}, Mode=OneWay}"/>
                        <MenuItem Command="components:TextEditorCommands.ConvertToWide"   Header="{Binding Resources.Command_ConvertToWide, Source={x:Static models:ResourceService.Instance}, Mode=OneWay}"/>
                        <Separator/>
                        <MenuItem Command="ae:AvalonEditCommands.ConvertToLowercase" Header="{Binding Resources.Command_ConvertToLowerCase, Source={x:Static models:ResourceService.Instance}, Mode=OneWay}"/>
                        <MenuItem Command="ae:AvalonEditCommands.ConvertToUppercase" Header="{Binding Resources.Command_ConvertToUpperCase, Source={x:Static models:ResourceService.Instance}, Mode=OneWay}"/>
                        <MenuItem Command="ae:AvalonEditCommands.ConvertToTitleCase" Header="{Binding Resources.Command_ConvertToTitleCase, Source={x:Static models:ResourceService.Instance}, Mode=OneWay}"/>
                        <Separator/>
                        <MenuItem Command="ae:AvalonEditCommands.ConvertTabsToSpaces" Header="{Binding Resources.Command_ConvertTabsToSpaces, Source={x:Static models:ResourceService.Instance}, Mode=OneWay}"/>
                        <MenuItem Command="ae:AvalonEditCommands.ConvertSpacesToTabs" Header="{Binding Resources.Command_ConvertSpacesToTabs, Source={x:Static models:ResourceService.Instance}, Mode=OneWay}"/>
                    </MenuItem>
                </MenuItem>
                <MenuItem Header="{Binding Resources.Command_View, Source={x:Static models:ResourceService.Instance}, Mode=OneWay}">
                    <MenuItem Command="{x:Static views:MainWindow.ActivateFileExplorer}" Header="{Binding Resources.Command_FileExplorer, Source={x:Static models:ResourceService.Instance}, Mode=OneWay}">
                        <MenuItem.Icon>
                            <mi:Material Kind="FileTree"/>
                        </MenuItem.Icon>
                    </MenuItem>
                    <MenuItem Command="{x:Static views:MainWindow.ActivateGrep}" Header="{Binding Resources.Command_Grep, Source={x:Static models:ResourceService.Instance}, Mode=OneWay}">
                        <MenuItem.Icon>
                            <mi:Material Kind="FolderSearchOutline"/>
                        </MenuItem.Icon>
                    </MenuItem>
                    <MenuItem Command="{x:Static views:MainWindow.ActivateClipboardHistory}" Header="{Binding Resources.Command_ClipboardHistory, Source={x:Static models:ResourceService.Instance}, Mode=OneWay}">
                        <MenuItem.Icon>
                            <mi:Modern Kind="ClipboardPaper"/>
                        </MenuItem.Icon>
                    </MenuItem>
                    <MenuItem Command="{x:Static views:MainWindow.ActivateProperty}" Header="{Binding Resources.Command_Property, Source={x:Static models:ResourceService.Instance}, Mode=OneWay}">
                        <MenuItem.Icon>
                            <mi:Material Kind="FileOutline"/>
                        </MenuItem.Icon>
                    </MenuItem>
                    <Separator/>
                    <MenuItem Command="{x:Static views:MainWindow.ActivateTerminal}" Header="{Binding Resources.Command_Terminal, Source={x:Static models:ResourceService.Instance}, Mode=OneWay}">
                        <MenuItem.Icon>
                            <mi:Material Kind="Console"/>
                        </MenuItem.Icon>
                    </MenuItem>
                    <MenuItem Command="{Binding AddTerminalCommand, Mode=OneTime}" Header="{Binding Resources.Command_NewTerminal, Source={x:Static models:ResourceService.Instance}, Mode=OneWay}" IsEnabled="{Binding IsVisibleTerminalContent, RelativeSource={RelativeSource AncestorType={x:Type Window}}, Mode=OneWay}" InputGestureText="Ctrl+Shift+@">
                        <MenuItem.Icon>
                            <mi:Modern Kind="New"/>
                        </MenuItem.Icon>
                    </MenuItem>
                    <MenuItem ItemsSource="{Binding Terminals, Mode=OneWay}" Header="{Binding Resources.Command_Terminals, Source={x:Static models:ResourceService.Instance}, Mode=OneWay}" IsEnabled="{qc:MultiBinding '$P0.CompareTo(0) == 1 ## $P1', P0={Binding Terminals.Count, Mode=OneWay}, P1={Binding IsVisibleTerminalContent, RelativeSource={RelativeSource AncestorType={x:Type Window}}, Mode=OneWay}}">
                        <MenuItem.ItemContainerStyle>
                            <Style TargetType="{x:Type MenuItem}" BasedOn="{StaticResource Default.MenuItem}">
                                <Setter Property="Header" Value="{Binding TerminalName, Mode=OneWay}"/>
                                <Setter Property="Command" Value="{Binding DataContext.ActivateTerminalCommand, RelativeSource={RelativeSource AncestorType={x:Type Window}}, Mode=OneTime}"/>
                                <Setter Property="CommandParameter" Value="{Binding Mode=OneWay}"/>
                            </Style>
                        </MenuItem.ItemContainerStyle>
                    </MenuItem>
                    <Separator/>
                    <MenuItem Command="{Binding MergeWindowsCommand, Source={x:Static viewModels:WorkspaceViewModel.Instance}, Mode=OneTime}" Header="{Binding Resources.Command_MergeWindows, Source={x:Static models:ResourceService.Instance}, Mode=OneWay}">
                        <MenuItem.Icon>
                            <mi:Material Kind="ArrangeBringToFront"/>
                        </MenuItem.Icon>
                    </MenuItem>
                    <MenuItem ItemsSource="{Binding Windows, Source={x:Static viewModels:WorkspaceViewModel.Instance}, Mode=OneWay}" Header="{Binding Resources.Command_WindowList, Source={x:Static models:ResourceService.Instance}, Mode=OneWay}">
                        <MenuItem.ItemContainerStyle>
                            <Style TargetType="{x:Type MenuItem}" BasedOn="{StaticResource Default.MenuItem}">
                                <Setter Property="Header" Value="{qc:MultiBinding '\'Window\-\' + $P0 + \': \' + $P1', P0={Binding Sequense, Mode=OneWay}, P1={Binding ActiveEditor.FileName, Mode=OneWay}}"/>
                                <Setter Property="Command" Value="{Binding ActivateEditorCommand, Mode=OneTime}"/>
                            </Style>
                        </MenuItem.ItemContainerStyle>
                    </MenuItem>
                    <MenuItem ItemsSource="{Binding Editors, Mode=OneWay}" Header="{Binding Resources.Command_Editors, Source={x:Static models:ResourceService.Instance}, Mode=OneWay}" IsEnabled="{qc:Binding '$P.CompareTo(0) == 1', P={Binding Editors.Count}}">
                        <MenuItem.ItemContainerStyle>
                            <Style TargetType="{x:Type MenuItem}" BasedOn="{StaticResource Default.MenuItem}">
                                <Setter Property="Header" Value="{Binding FileName, Mode=OneWay}"/>
                                <Setter Property="Command" Value="{Binding DataContext.ActivateEditorCommand, RelativeSource={RelativeSource AncestorType={x:Type Window}}, Mode=OneTime}"/>
                                <Setter Property="CommandParameter" Value="{Binding Mode=OneWay}"/>
                            </Style>
                        </MenuItem.ItemContainerStyle>
                    </MenuItem>
                </MenuItem>
                <MenuItem Header="{Binding Resources.Command_Tools, Source={x:Static models:ResourceService.Instance}, Mode=OneWay}">
                    <MenuItem Header="{Binding Resources.Command_Options, Source={x:Static models:ResourceService.Instance}, Mode=OneWay}" HeaderStringFormat="{}{0}..."
                              Click="{qc:QuickEvent '$OptionsFlyout.IsOpen = true'}" InputGestureText="Ctrl+,">
                        <MenuItem.Icon>
                            <mi:Modern Kind="Cog"/>
                        </MenuItem.Icon>
                    </MenuItem>
                    <MenuItem Header="{Binding Resources.Command_Encoding, Source={x:Static models:ResourceService.Instance}, Mode=OneWay}"
                              Click="{qc:QuickEvent '$EncodingComboBox.IsDropDownOpen = true'}">
                        <MenuItem.Icon>
                            <mi:Material Kind="Alphabetical"/>
                        </MenuItem.Icon>
                    </MenuItem>
                    <MenuItem Header="{Binding Resources.Command_SyntaxDefinition, Source={x:Static models:ResourceService.Instance}, Mode=OneWay}"
                              Click="{qc:QuickEvent '$LanguageComboBox.IsDropDownOpen = true'}">
                        <MenuItem.Icon>
                            <mi:Material Kind="LanguageCpp"/>
                        </MenuItem.Icon>
                    </MenuItem>
                    <MenuItem Command="components:TextEditorCommands.Completion" Header="{Binding Resources.Command_Completion, Source={x:Static models:ResourceService.Instance}, Mode=OneWay}">
                        <MenuItem.Icon>
                            <mi:Material Kind="AutoFix"/>
                        </MenuItem.Icon>
                    </MenuItem>
                    <MenuItem Header="{Binding Resources.Command_Zoom, Source={x:Static models:ResourceService.Instance}, Mode=OneWay}">
                        <MenuItem Command="components:TextEditorCommands.ZoomIn"    Header="{Binding Resources.Command_ZoomIn, Source={x:Static models:ResourceService.Instance}, Mode=OneWay}" InputGestureText="Ctrl+Plus"/>
                        <MenuItem Command="components:TextEditorCommands.ZoomOut"   Header="{Binding Resources.Command_ZoomOut, Source={x:Static models:ResourceService.Instance}, Mode=OneWay}" InputGestureText="Ctrl+Minus"/>
                        <MenuItem Command="components:TextEditorCommands.ZoomReset" Header="{Binding Resources.Command_ZoomReset, Source={x:Static models:ResourceService.Instance}, Mode=OneWay}" InputGestureText="Ctrl+0"/>
                    </MenuItem>
                </MenuItem>
                <MenuItem Header="{Binding Resources.Command_Help, Source={x:Static models:ResourceService.Instance}, Mode=OneWay}">
                    <MenuItem Header="{Binding Resources.Command_About, Source={x:Static models:ResourceService.Instance}, Mode=OneWay}" HeaderStringFormat="{}{0}..."
                              Click="{qc:QuickEvent '$AboutFlyout.IsOpen = true'}">
                        <MenuItem.Icon>
                            <mi:Modern Kind="InformationCircle"/>
                        </MenuItem.Icon>
                    </MenuItem>
                </MenuItem>
            </Menu>
        </m:WindowCommands>
    </m:MetroWindow.LeftWindowCommands>

    <!-- ウィンドウコマンド(右) -->
    <m:MetroWindow.RightWindowCommands>
        <m:WindowCommands>
            <ToggleButton IsChecked="{Binding Topmost, RelativeSource={RelativeSource AncestorType={x:Type Window}}, Mode=TwoWay}" ToolTip="{Binding Resources.Command_Topmost, Source={x:Static models:ResourceService.Instance}, Mode=OneWay}" Focusable="False">
                <mi:PackIconModern>
                    <mi:PackIconModern.Resources>
                        <Style TargetType="{x:Type mi:PackIconModern}">
                            <Setter Property="Kind" Value="Pin"/>
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding Topmost, RelativeSource={RelativeSource AncestorType={x:Type Window}}, Mode=OneWay}" Value="True">
                                    <Setter Property="RenderTransform">
                                        <Setter.Value>
                                            <RotateTransform Angle="-45" CenterX="7" CenterY="7"/>
                                        </Setter.Value>
                                    </Setter>
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </mi:PackIconModern.Resources>
                </mi:PackIconModern>
            </ToggleButton>
        </m:WindowCommands>
    </m:MetroWindow.RightWindowCommands>

    <!-- ウィンドウコンテンツ -->
    <Grid>
        <Grid.Resources>
            <ContextMenu x:Key="ContextMenu">
                <MenuItem IsCheckable="True" IsChecked="{Binding System.ShowMenuBar,   Source={x:Static models:SettingsService.Instance}, Mode=TwoWay}" Header="{Binding Resources.Command_ShowMenuBar,   Source={x:Static models:ResourceService.Instance}, Mode=OneWay}"/>
                <MenuItem IsCheckable="True" IsChecked="{Binding System.ShowToolBar,   Source={x:Static models:SettingsService.Instance}, Mode=TwoWay}" Header="{Binding Resources.Command_ShowToolBar,   Source={x:Static models:ResourceService.Instance}, Mode=OneWay}"/>
                <MenuItem IsCheckable="True" IsChecked="{Binding System.ShowSideBar,   Source={x:Static models:SettingsService.Instance}, Mode=TwoWay}" Header="{Binding Resources.Command_ShowSideBar,   Source={x:Static models:ResourceService.Instance}, Mode=OneWay}"/>
                <MenuItem IsCheckable="True" IsChecked="{Binding System.ShowStatusBar, Source={x:Static models:SettingsService.Instance}, Mode=TwoWay}" Header="{Binding Resources.Command_ShowStatusBar, Source={x:Static models:ResourceService.Instance}, Mode=OneWay}"/>
            </ContextMenu>
            <Style x:Key="ReadOnlyTextBox" TargetType="{x:Type TextBox}" BasedOn="{StaticResource Default.TextBox}">
                <Setter Property="IsReadOnly" Value="True"/>
                <Setter Property="IsTabStop" Value="False"/>
                <Setter Property="VerticalContentAlignment" Value="Top"/>
                <Setter Property="VerticalScrollBarVisibility" Value="Hidden"/>
                <Setter Property="HorizontalScrollBarVisibility" Value="Hidden"/>
                <Setter Property="ContextMenu">
                    <Setter.Value>
                        <ContextMenu Visibility="Collapsed"/>
                    </Setter.Value>
                </Setter>
            </Style>
            <Style x:Key="TabItemButton" TargetType="{x:Type Button}" BasedOn="{StaticResource Default.Button}">
                <Setter Property="Padding" Value="0"/>
                <Setter Property="Height" Value="20"/>
                <Setter Property="Width" Value="{Binding ActualHeight, RelativeSource={RelativeSource Self}}"/>
                <Setter Property="Background" Value="{x:Null}"/>
                <Setter Property="BorderBrush" Value="{x:Null}"/>
            </Style>
        </Grid.Resources>
        
        <Grid ge:GridEx.RowDefinition="Auto, *, Auto" ContextMenu="{StaticResource ContextMenu}">

            <!-- 共通キーバインディング -->
            <Grid.InputBindings>
                <KeyBinding Command="{Binding AddEditorCommand, Mode=OneTime}"   Key="N"  Modifiers="Ctrl"/>
                <KeyBinding Command="{Binding OpenCommand, Mode=OneTime}"        Key="O"  Modifiers="Ctrl"/>
                <KeyBinding Command="{Binding SaveCommand, Mode=OneTime}"        Key="S"  Modifiers="Ctrl"/>
                <KeyBinding Command="{Binding SaveAsCommand, Mode=OneTime}"      Key="S"  Modifiers="Ctrl+Shift"/>
                <KeyBinding Command="{Binding SaveAllCommand, Mode=OneTime}"     Key="K"  Modifiers="Ctrl+Shift"/>
                <KeyBinding Command="{Binding CloseEditorCommand, Mode=OneTime}" Key="F4" Modifiers="Ctrl"/>
                <KeyBinding Command="{Binding AddWindowCommand, Source={x:Static viewModels:WorkspaceViewModel.Instance}, Mode=OneTime}"       Key="N"  Modifiers="Ctrl+Shift"/>
                <KeyBinding Command="{Binding ExitApplicationCommand, Source={x:Static viewModels:WorkspaceViewModel.Instance}, Mode=OneTime}" Key="F4" Modifiers="Alt+Shift"/>
            </Grid.InputBindings>

            <!-- ツールバー -->
            <ToolBar Grid.Row="0">
                <Button Command="{Binding AddEditorCommand, Mode=OneTime}" ToolTip="{Binding Resources.Command_New, Source={x:Static models:ResourceService.Instance}, Mode=OneWay}">
                    <mi:Modern Kind="PageNew"/>
                </Button>
                <Button Command="{Binding OpenCommand, Mode=OneTime}" ToolTip="{Binding Resources.Command_Open, Source={x:Static models:ResourceService.Instance}, Mode=OneWay}">
                    <mi:Material Kind="FolderOpen"/>
                </Button>
                <Button Command="{Binding SaveCommand, Mode=OneTime}" ToolTip="{Binding Resources.Command_Save, Source={x:Static models:ResourceService.Instance}, Mode=OneWay}">
                    <mi:Material Kind="ContentSave"/>
                </Button>
                <Separator Margin="{StaticResource Const.Gap1W1H}"/>
                <Button Command="Undo" ToolTip="{Binding Resources.Command_Undo, Source={x:Static models:ResourceService.Instance}, Mode=OneWay}">
                    <mi:Modern Kind="UndoCurve"/>
                </Button>
                <Button Command="Redo" ToolTip="{Binding Resources.Command_Redo, Source={x:Static models:ResourceService.Instance}, Mode=OneWay}">
                    <mi:Modern Kind="RedoCurve"/>
                </Button>
                <Separator Margin="{StaticResource Const.Gap1W1H}"/>
                <Button Command="Cut" ToolTip="{Binding Resources.Command_Cut, Source={x:Static models:ResourceService.Instance}, Mode=OneWay}">
                    <mi:Modern Kind="Scissor"/>
                </Button>
                <Button Command="Copy" ToolTip="{Binding Resources.Command_Copy, Source={x:Static models:ResourceService.Instance}, Mode=OneWay}">
                    <mi:Modern Kind="PageCopy"/>
                </Button>
                <Button Command="Paste" ToolTip="{Binding Resources.Command_Paste, Source={x:Static models:ResourceService.Instance}, Mode=OneWay}">
                    <mi:Modern Kind="ClipboardPaste"/>
                </Button>
                <Button Command="EditingCommands.Delete" ToolTip="{Binding Resources.Command_Delete, Source={x:Static models:ResourceService.Instance}, Mode=OneWay}">
                    <mi:Material Kind="Eraser"/>
                </Button>
                <Button Command="SelectAll" ToolTip="{Binding Resources.Command_SelectAll, Source={x:Static models:ResourceService.Instance}, Mode=OneWay}">
                    <mi:Modern Kind="CursorDefault"/>
                </Button>
                <Separator Margin="{StaticResource Const.Gap1W1H}"/>
                <Button Command="Find" ToolTip="{Binding Resources.Command_Find, Source={x:Static models:ResourceService.Instance}, Mode=OneWay}">
                    <mi:Material Kind="Magnify"/>
                </Button>
                <Button Command="Replace" ToolTip="{Binding Resources.Command_Replace, Source={x:Static models:ResourceService.Instance}, Mode=OneWay}">
                    <mi:Material Kind="FindReplace"/>
                </Button>
            </ToolBar>

            <!-- コンテンツエリア -->
            <Grid Grid.Row="1">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition x:Name="HamburgerMenuColumn"
                                      Width="Auto" 
                                      MinWidth="{qc:Binding '$P ? 48 : 0', P={Binding System.ShowSideBar, Source={x:Static models:SettingsService.Instance}, Mode=OneWay}}"
                                      MaxWidth="{qc:Binding '$P - 48 - 200', P={Binding ActualWidth, RelativeSource={RelativeSource AncestorType={x:Type Window}}, Mode=OneWay}}"/>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition Width="3*"/>
                </Grid.ColumnDefinitions>
                
                <!-- ハンバーガーメニュー -->
                <m:HamburgerMenu x:Name="HamburgerMenu" Grid.Column="0" Width="48" HamburgerWidth="48" HamburgerHeight="0" HamburgerVisibility="Collapsed" ItemInvoked="HamburgerMenu_ItemInvoked">
                    <i:Interaction.Triggers>
                        <ei:PropertyChangedTrigger Binding="{Binding Visibility, ElementName=HamburgerMenu, Mode=OneWay}">
                            <ei:ChangePropertyAction PropertyName="Width" Value="Auto" TargetName="HamburgerMenuColumn"/>
                        </ei:PropertyChangedTrigger>
                    </i:Interaction.Triggers>
                    <m:HamburgerMenu.Resources>
                        <Style x:Key="IconButton" TargetType="{x:Type Button}" BasedOn="{StaticResource Default.Button}">
                            <Setter Property="Padding" Value="0"/>
                            <Setter Property="Width" Value="{Binding ActualHeight, RelativeSource={RelativeSource Self}}"/>
                        </Style>
                    </m:HamburgerMenu.Resources>
                    <m:HamburgerMenu.ItemTemplate>
                        <DataTemplate DataType="{x:Type m:HamburgerMenuIconItem}">
                            <Grid Height="48" ge:GridEx.ColumnDefinition="48, *">
                                <Border ToolTip="{Binding Label, Mode=OneWay}" Background="Transparent">
                                    <ContentControl Content="{Binding Icon, Mode=OneWay}" HorizontalAlignment="Center" VerticalAlignment="Center" IsTabStop="False" Focusable="False"/>
                                </Border>
                            </Grid>
                        </DataTemplate>
                    </m:HamburgerMenu.ItemTemplate>
                    <m:HamburgerMenu.OptionsItemTemplate>
                        <DataTemplate DataType="{x:Type m:HamburgerMenuIconItem}">
                            <Grid Height="48" ge:GridEx.ColumnDefinition="48, *">
                                <Border ToolTip="{Binding Label, Mode=OneWay}" Background="Transparent">
                                    <ContentControl Content="{Binding Icon, Mode=OneWay}" HorizontalAlignment="Center" VerticalAlignment="Center" IsTabStop="False" Focusable="False"/>
                                </Border>
                            </Grid>
                        </DataTemplate>
                    </m:HamburgerMenu.OptionsItemTemplate>
                    <m:HamburgerMenu.ContentTemplate>
                        <DataTemplate DataType="{x:Type m:HamburgerMenuIconItem}">
                            <Grid Width="{qc:Binding '$P - 48', P={Binding ActualWidth, ElementName=HamburgerMenu, Mode=OneWay}}" ge:GridEx.RowDefinition="Auto, *">
                                <Grid.ContextMenu>
                                    <ContextMenu/>
                                </Grid.ContextMenu>
                                <TextBlock      Grid.Row="0" Margin="{StaticResource Const.Gap1W2H}" Text="{Binding Label, Mode=OneWay}" FontSize="{DynamicResource NormalFontSize}"/>
                                <ContentControl Grid.Row="1" Margin="{StaticResource Const.Gap1W1H}" Content="{Binding Tag, Mode=OneWay}" IsTabStop="False" Focusable="False"/>
                            </Grid>
                        </DataTemplate>
                    </m:HamburgerMenu.ContentTemplate>
                    <m:HamburgerMenu.ItemsSource>
                        <m:HamburgerMenuItemCollection>
                            <m:HamburgerMenuIconItem x:Name="FileExplorerItem" Label="{Binding Resources.Command_FileExplorer, Source={x:Static models:ResourceService.Instance}, Mode=OneWay}">
                                <m:HamburgerMenuIconItem.Icon>
                                    <mi:Material Kind="FileTree"/>
                                </m:HamburgerMenuIconItem.Icon>
                                <m:HamburgerMenuIconItem.Tag>
                                    <TreeView ItemsSource="{Binding Data.FileNodes, Source={StaticResource Proxy}, Mode=OneWay}">
                                        <TreeView.ItemContainerStyle>
                                            <Style TargetType="{x:Type TreeViewItem}" BasedOn="{StaticResource Default.TreeViewItem}">
                                                <EventSetter Event="MouseDoubleClick" Handler="FileExplorerItem_MouseDoubleClick"/>
                                                <EventSetter Event="KeyDown" Handler="FileExplorerItem_KeyDown"/>
                                                <Setter Property="IsExpanded" Value="{Binding IsExpanded, Mode=TwoWay}"/>
                                                <Style.Triggers>
                                                    <DataTrigger Binding="{Binding IsEmpty, Mode=OneWay}" Value="True">
                                                        <Setter Property="Foreground" Value="{DynamicResource GrayBrush5}"/>
                                                    </DataTrigger>
                                                </Style.Triggers>
                                            </Style>
                                        </TreeView.ItemContainerStyle>
                                        <TreeView.ItemTemplate>
                                            <HierarchicalDataTemplate ItemsSource="{Binding Children, Mode=OneWay}" DataType="{x:Type viewModels:FileNodeViewModel}">
                                                <Border Background="Transparent" ToolTip="{Binding FileName, Mode=OneWay}" ToolTipService.IsEnabled="{qc:Binding '!$P', P={Binding IsEmpty, Mode=OneWay}}">
                                                    <StackPanel Orientation="Horizontal">
                                                        <Image Source="{Binding Image, Mode=OneWay}" Margin="{StaticResource Const.Gap1W}"/>
                                                        <TextBlock Text="{qc:MultiBinding '$P0 ? \'empty\' : Path.GetFileName($P1)', P0={Binding IsEmpty, Mode=OneWay}, P1={Binding FileName, Mode=OneWay}}"/>
                                                    </StackPanel>
                                                </Border>
                                            </HierarchicalDataTemplate>
                                        </TreeView.ItemTemplate>
                                    </TreeView>
                                </m:HamburgerMenuIconItem.Tag>
                            </m:HamburgerMenuIconItem>
                            <m:HamburgerMenuIconItem x:Name="GrepItem" Label="{Binding Resources.Command_Grep, Source={x:Static models:ResourceService.Instance}, Mode=OneWay}">
                                <m:HamburgerMenuIconItem.Icon>
                                    <mi:Material Kind="FolderSearchOutline"/>
                                </m:HamburgerMenuIconItem.Icon>
                                <m:HamburgerMenuIconItem.Tag>
                                    <Grid DataContext="{Binding Data.Grep, Source={StaticResource Proxy}, Mode=OneWay}" ge:GridEx.RowDefinition="Auto, 10, *, 3, Auto">
                                        <i:Interaction.Triggers>
                                            <p:InteractionRequestTrigger SourceObject="{Binding MessageRequest, Mode=OneTime}">
                                                <behaviors:MessageActionEx UseOverlayMessage="{Binding System.UseOverlayMessage, Source={x:Static models:SettingsService.Instance}, Mode=OneWay}"/>
                                            </p:InteractionRequestTrigger>
                                            <p:InteractionRequestTrigger SourceObject="{Binding OpenDirectoryRequest, Mode=OneTime}">
                                                <mlwi:OpenFileAction IsFolderPicker="True" UseFolderBrowserDialog="True"/>
                                            </p:InteractionRequestTrigger>
                                        </i:Interaction.Triggers>
                                        <Grid Grid.Row="0" ge:GridEx.RowDefinition="Auto, 5, Auto, 5, Auto, 5, Auto, 5, Auto, 10, Auto, 5, Auto, 5, Auto">
                                            <Grid Grid.Row="0" ge:GridEx.ColumnDefinition="*, 5, Auto">
                                                <TextBox Grid.Column="0" Text="{Binding RootPath, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" m:TextBoxHelper.Watermark="{Binding Resources.Label_Directory, Source={x:Static models:ResourceService.Instance}, Mode=OneWay}" m:TextBoxHelper.UseFloatingWatermark="True" m:TextBoxHelper.ClearTextButton="True"/>
                                                <Button  Grid.Column="2" Command="{Binding SelectRootPathCommand, Mode=OneTime}" ToolTip="{Binding Resources.Command_Open, Source={x:Static models:ResourceService.Instance}, Mode=OneWay}" Style="{StaticResource IconButton}">
                                                    <mi:Modern Kind="FolderOpen"/>
                                                </Button>
                                            </Grid>
                                            <Grid Grid.Row="2" ge:GridEx.ColumnDefinition="*, 5, Auto">
                                                <TextBox Grid.Column="0" Text="{Binding SearchText, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" m:TextBoxHelper.Watermark="{Binding Resources.Label_SearchText, Source={x:Static models:ResourceService.Instance}, Mode=OneWay}" m:TextBoxHelper.UseFloatingWatermark="True" m:TextBoxHelper.ClearTextButton="True"/>
                                                <Button  Grid.Column="2" Command="{Binding GrepCommand, Mode=OneTime}" ToolTip="{Binding Resources.Command_Find, Source={x:Static models:ResourceService.Instance}, Mode=OneWay}" Style="{StaticResource IconButton}">
                                                    <mi:Material Kind="Magnify"/>
                                                </Button>
                                            </Grid>
                                            <TextBox   Grid.Row="4"  Text="{Binding SearchPattern, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" m:TextBoxHelper.Watermark="{Binding Resources.Label_SearchPattern, Source={x:Static models:ResourceService.Instance}, Mode=OneWay}" m:TextBoxHelper.UseFloatingWatermark="True" m:TextBoxHelper.ClearTextButton="True"/>
                                            <ComboBox  Grid.Row="6"  SelectedValue="{Binding Encoding, Mode=TwoWay}" ItemsSource="{x:Static root:Consts.ENCODINGS}" DisplayMemberPath="EncodingName" m:TextBoxHelper.Watermark="{Binding Resources.Label_Encoding, Source={x:Static models:ResourceService.Instance}, Mode=OneWay}" m:TextBoxHelper.UseFloatingWatermark="True"/>
                                            <CheckBox  Grid.Row="8"  IsChecked="{Binding AutoDetectEncoding, Mode=TwoWay}" Content="{Binding Resources.Label_AutoDetect, Source={x:Static models:ResourceService.Instance}, Mode=OneWay}"/>
                                            <CheckBox  Grid.Row="10" IsChecked="{Binding AllDirectories, Mode=TwoWay}" Content="{Binding Resources.Command_AllDirectories, Source={x:Static models:ResourceService.Instance}, Mode=OneWay}"/>
                                            <CheckBox  Grid.Row="12" IsChecked="{qc:Binding Convert='!$P', ConvertBack='!$value', P={Binding IgnoreCase, Mode=TwoWay}}" Content="{Binding Resources.Command_CaseSensitive, Source={x:Static models:ResourceService.Instance}, Mode=OneWay}"/>
                                            <CheckBox  Grid.Row="14" IsChecked="{Binding UseRegex, Mode=TwoWay}" Content="{Binding Resources.Command_UseRegex, Source={x:Static models:ResourceService.Instance}, Mode=OneWay}"/>
                                        </Grid>
                                        <ListBox Grid.Row="2" ItemsSource="{Binding Results, Mode=OneWay}">
                                            <ListBox.ItemContainerStyle>
                                                <Style TargetType="{x:Type ListBoxItem}" BasedOn="{StaticResource Default.ListBoxItem}">
                                                    <EventSetter Event="MouseDoubleClick" Handler="GrepItem_MouseDoubleClick"/>
                                                    <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
                                                </Style>
                                            </ListBox.ItemContainerStyle>
                                            <ListBox.ItemTemplate>
                                                <DataTemplate>
                                                    <TextBlock Text="{qc:MultiBinding '$P1.Substring($P0.Length) + \'(\' + $P2 + \'): \' + ($P3.Length.CompareTo(80) == 1 ? $P3.Substring(0, 80) : $P3)', P0={Binding Data.Grep.RootPath, Source={StaticResource Proxy}, Mode=OneTime}, P1={Binding Path, Mode=OneWay}, P2={Binding Line, Mode=OneWay}, P3={Binding Text, Mode=OneWay}}"/>
                                                </DataTemplate>
                                            </ListBox.ItemTemplate>
                                        </ListBox>
                                        <Grid Grid.Row="4" ge:GridEx.ColumnDefinition="*, 5, Auto">
                                            <TextBlock Grid.Column="0" Text="{Binding Results.Count, StringFormat={}{0} Lines, Mode=OneWay}"/>
                                            <Button Grid.Column="2" Command="{Binding CopyGrepResultsCommand, Mode=OneTime}" ToolTip="{Binding Resources.Command_CopyToClipboard, Source={x:Static models:ResourceService.Instance}, Mode=OneWay}" Style="{StaticResource IconButton}">
                                                <mi:Modern Kind="ClipboardPaper"/>
                                            </Button>
                                        </Grid>
                                        <Border d:IsHidden="True" Style="{StaticResource Common.Overlay}" Visibility="{qc:Binding '$P ? Visibility.Visible : Visibility.Collapsed', P={Binding IsWorking, Mode=OneWay}}">
                                            <m:ProgressRing/>
                                        </Border>
                                    </Grid>
                                </m:HamburgerMenuIconItem.Tag>
                            </m:HamburgerMenuIconItem>
                            <m:HamburgerMenuIconItem x:Name="ClipboardHistoryItem" Label="{Binding Resources.Command_ClipboardHistory, Source={x:Static models:ResourceService.Instance}, Mode=OneWay}">
                                <m:HamburgerMenuIconItem.Icon>
                                    <mi:Modern Kind="ClipboardPaper"/>
                                </m:HamburgerMenuIconItem.Icon>
                                <m:HamburgerMenuIconItem.Tag>
                                    <Grid ge:GridEx.RowDefinition="3*(50-), Auto, *(50-)">
                                        <ListBox Grid.Row="0" ItemsSource="{Binding ClipboardItems, Source={x:Static viewModels:WorkspaceViewModel.Instance}, Mode=OneWay}">
                                            <ListBox.ItemContainerStyle>
                                                <Style TargetType="{x:Type ListBoxItem}" BasedOn="{StaticResource Default.ListBoxItem}">
                                                    <EventSetter Event="MouseDoubleClick" Handler="ClipboardHistoryItem_MouseDoubleClick"/>
                                                    <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
                                                </Style>
                                            </ListBox.ItemContainerStyle>
                                            <ListBox.ItemTemplate>
                                                <DataTemplate>
                                                    <TextBlock Text="{qc:Binding '$P.Replace(ControlChars.Cr.ToString(), string.Empty).Replace(ControlChars.Lf.ToString(), string.Empty)', P={Binding Mode=OneWay}}"/>
                                                </DataTemplate>
                                            </ListBox.ItemTemplate>
                                        </ListBox>
                                        <GridSplitter Grid.Row="1" Height="{StaticResource Const.Gap1}"/>
                                        <TextBox Grid.Row="2" Text="{Binding Children[0].(ListBox.SelectedItem), RelativeSource={RelativeSource AncestorType={x:Type Grid}}, Mode=OneWay}" Style="{StaticResource ReadOnlyTextBox}"/>
                                    </Grid>
                                </m:HamburgerMenuIconItem.Tag>
                            </m:HamburgerMenuIconItem>
                            <m:HamburgerMenuIconItem x:Name="PropertyItem" Label="{Binding Resources.Command_Property, Source={x:Static models:ResourceService.Instance}, Mode=OneWay}">
                                <m:HamburgerMenuIconItem.Icon>
                                    <mi:Material Kind="FileOutline"/>
                                </m:HamburgerMenuIconItem.Icon>
                                <m:HamburgerMenuIconItem.Tag>
                                    <ScrollViewer>
                                        <StackPanel DataContext="{Binding Data.ActiveEditor, Source={StaticResource Proxy}, Mode=OneWay}">
                                            <Label     Content="{Binding Resources.Label_Name,          Source={x:Static models:ResourceService.Instance}, Mode=OneWay}"/>
                                            <TextBlock Margin="20,0,0,5" Text="{qc:Binding 'Path.GetFileName($P)', P={Binding FileName, Mode=OneWay}}"/>
                                            <Label     Content="{Binding Resources.Label_Type,          Source={x:Static models:ResourceService.Instance}, Mode=OneWay}"/>
                                            <TextBlock Margin="20,0,0,5" Text="{Binding FileType, Mode=OneWay}"/>
                                            <Label     Content="{Binding Resources.Label_Directory,     Source={x:Static models:ResourceService.Instance}, Mode=OneWay}"/>
                                            <TextBlock Margin="20,0,0,5" Text="{Binding FileInfo.DirectoryName, Mode=OneWay}"/>
                                            <Label     Content="{Binding Resources.Label_Size,          Source={x:Static models:ResourceService.Instance}, Mode=OneWay}"/>
                                            <TextBlock Margin="20,0,0,5" Text="{Binding FileInfo.Length, StringFormat={}{0:N0} bytes, Mode=OneWay}"/>
                                            <Label     Content="{Binding Resources.Label_CreationDate,  Source={x:Static models:ResourceService.Instance}, Mode=OneWay}"/>
                                            <TextBlock Margin="20,0,0,5" Text="{Binding FileInfo.CreationTime,   StringFormat=yyyy/MM/dd HH:mm:ss, Mode=OneWay}"/>
                                            <Label     Content="{Binding Resources.Label_ModifiredDate, Source={x:Static models:ResourceService.Instance}, Mode=OneWay}"/>
                                            <TextBlock Margin="20,0,0,5" Text="{Binding FileInfo.LastWriteTime,  StringFormat=yyyy/MM/dd HH:mm:ss, Mode=OneWay}"/>
                                            <Label     Content="{Binding Resources.Label_AccessDate,    Source={x:Static models:ResourceService.Instance}, Mode=OneWay}"/>
                                            <TextBlock Margin="20,0,0,5" Text="{Binding FileInfo.LastAccessTime, StringFormat=yyyy/MM/dd HH:mm:ss, Mode=OneWay}"/>
                                            <Label     Content="{Binding Resources.Label_Owner,         Source={x:Static models:ResourceService.Instance}, Mode=OneWay}"/>
                                            <TextBlock Margin="20,0,0,5" Text="{Binding FileOwner, Mode=OneWay}"/>
                                        </StackPanel>
                                    </ScrollViewer>
                                </m:HamburgerMenuIconItem.Tag>
                            </m:HamburgerMenuIconItem>
                        </m:HamburgerMenuItemCollection>
                    </m:HamburgerMenu.ItemsSource>
                    <m:HamburgerMenu.OptionsItemsSource>
                        <m:HamburgerMenuItemCollection>
                            <m:HamburgerMenuIconItem x:Name="OptionsItem" Label="{Binding Resources.Command_Options, Source={x:Static models:ResourceService.Instance}, Mode=OneWay}">
                                <m:HamburgerMenuIconItem.Icon>
                                    <mi:Modern Kind="Cog"/>
                                </m:HamburgerMenuIconItem.Icon>
                            </m:HamburgerMenuIconItem>
                        </m:HamburgerMenuItemCollection>
                    </m:HamburgerMenu.OptionsItemsSource>
                </m:HamburgerMenu>

                <GridSplitter Grid.Column="1" Width="{qc:MultiBinding '$P0 ## double.IsNaN($P1) ? 5 : 0', P0={Binding System.ShowSideBar, Source={x:Static models:SettingsService.Instance}, Mode=OneWay}, P1={Binding Width, ElementName=HamburgerMenu, Mode=OneWay}}"/>

                <!-- メインコンテンツ -->
                <Grid Grid.Column="2">
                    <Grid.RowDefinitions>
                        <RowDefinition Height="3*" MinHeight="50"/>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition x:Name="TerminalContentRow" Height="*"/>
                    </Grid.RowDefinitions>

                    <!-- テキストエディター -->
                    <components:DraggableTabControl x:Name="TextEditorTabControl"
                                                    Grid.Row="0"
                                                    Grid.RowSpan="{qc:Binding '$P ? 1 : 3', P={Binding IsVisibleTerminalContent, RelativeSource={RelativeSource AncestorType={x:Type Window}}, Mode=OneWay}}"
                                                    IsHeaderPanelVisible="{qc:MultiBinding '$P0 || $P1.CompareTo(1) == 1', P0={Binding System.ShowSingleTab, Source={x:Static models:SettingsService.Instance}, Mode=OneWay}, P1={Binding Items.Count, RelativeSource={RelativeSource Self}, Mode=OneWay}}"
                                                    ItemsSource="{Binding Editors, Mode=OneWay}"
                                                    SelectedItem="{Binding ActiveEditor, Mode=TwoWay}"
                                                    NewItemFactory="{Binding EditorFactory}"
                                                    ClosingItemCallback="{Binding ClosingEditorHandler, Mode=OneTime}"
                                                    SelectionChanged="TextEditorTabControl_SelectionChanged">
                        <dr:TabablzControl.InterTabController>
                            <dr:InterTabController InterTabClient="{Binding InterTabClient, RelativeSource={RelativeSource AncestorType={x:Type Window}}, Mode=OneWay}"/>
                        </dr:TabablzControl.InterTabController>
                        <dr:TabablzControl.ItemContainerStyle>
                            <Style TargetType="{x:Type dr:DragablzItem}" BasedOn="{StaticResource Default.DragablzItem}">
                                <EventSetter Event="MouseRightButtonDown" Handler="TabItem_MouseRightButtonDown"/>
                                <Setter Property="ToolTipService.IsEnabled" Value="{qc:Binding '!$P', P={Binding IsNewFile, Mode=OneWay}}"/>
                                <Setter Property="ToolTip" Value="{Binding FileName, Mode=OneWay}"/>
                                <Style.Triggers>
                                    <MultiDataTrigger>
                                        <MultiDataTrigger.Conditions>
                                            <Condition Binding="{Binding IsReadOnly, Mode=OneWay}" Value="True"/>
                                            <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}, Mode=OneWay}" Value="True"/>
                                        </MultiDataTrigger.Conditions>
                                        <Setter Property="Background" Value="{DynamicResource PurpleColorBrush}"/>
                                    </MultiDataTrigger>
                                    <MultiDataTrigger>
                                        <MultiDataTrigger.Conditions>
                                            <Condition Binding="{Binding IsReadOnly, Mode=OneWay}" Value="True"/>
                                            <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}, Mode=OneWay}" Value="True"/>
                                        </MultiDataTrigger.Conditions>
                                        <Setter Property="Background" Value="{DynamicResource PurpleColorBrush}"/>
                                    </MultiDataTrigger>
                                </Style.Triggers>
                            </Style>
                        </dr:TabablzControl.ItemContainerStyle>
                        <dr:TabablzControl.HeaderItemTemplate>
                            <DataTemplate>
                                <TextBlock DataContext="{Binding Mode=OneWay}" Text="{qc:MultiBinding 'string.Concat($P0 ? \'\[R\/O\] \' : null, Path.GetFileName($P1), $P2 ? \'*\' : null)', P0={Binding IsReadOnly, Mode=OneWay}, P1={Binding FileName, Mode=OneWay}, P2={Binding IsModified, Mode=OneWay}}"/>
                            </DataTemplate>
                        </dr:TabablzControl.HeaderItemTemplate>
                        <dr:TabablzControl.HeaderSuffixContent>
                            <Grid ge:GridEx.ColumnDefinition="Auto, *" Margin="5,0,0,0">
                                <Button Grid.Column="0" Command="{x:Static dr:TabablzControl.AddItemCommand}" Style="{StaticResource TabItemButton}" Focusable="False">
                                    <mi:Material Kind="Plus" Height="12" Width="12"/>
                                </Button>
                                <Border Grid.Column="1" ContextMenu="{StaticResource ContextMenu}">
                                    <TextBlock VerticalAlignment="Stretch"/>
                                </Border>
                            </Grid>
                        </dr:TabablzControl.HeaderSuffixContent>
                        <dr:TabablzControl.ContextMenu>
                            <ContextMenu>
                                <MenuItem Command="{Binding CloseEditorCommand, Mode=OneTime}" Header="{Binding Resources.Command_Close, Source={x:Static models:ResourceService.Instance}, Mode=OneWay}" InputGestureText="Ctrl+F4">
                                    <MenuItem.Icon>
                                        <mi:Material Kind="Close"/>
                                    </MenuItem.Icon>
                                </MenuItem>
                                <MenuItem Command="{Binding CloseAllEditorCommand, Mode=OneTime}" Header="{Binding Resources.Command_CloseAll, Source={x:Static models:ResourceService.Instance}, Mode=OneWay}">
                                    <MenuItem.Icon>
                                        <mi:Modern Kind="LayerDelete"/>
                                    </MenuItem.Icon>
                                </MenuItem>
                                <MenuItem Command="{Binding CloseOtherEditorCommand, Mode=OneTime}" Header="{Binding Resources.Command_CloseOther, Source={x:Static models:ResourceService.Instance}, Mode=OneWay}"/>
                                <MenuItem ItemsSource="{Binding Editors, Mode=OneWay}" Header="{Binding Resources.Command_Editors, Source={x:Static models:ResourceService.Instance}, Mode=OneWay}" IsEnabled="{qc:Binding '$P.CompareTo(0) == 1', P={Binding Editors.Count, Mode=OneWay}}">
                                    <MenuItem.ItemContainerStyle>
                                        <Style TargetType="{x:Type MenuItem}" BasedOn="{StaticResource Default.MenuItem}">
                                            <Setter Property="Header" Value="{Binding FileName, Mode=OneWay}"/>
                                            <Setter Property="Command" Value="{Binding DataContext.ActivateEditorCommand, RelativeSource={RelativeSource AncestorType={x:Type Window}}, Mode=OneTime}"/>
                                            <Setter Property="CommandParameter" Value="{Binding Mode=OneWay}"/>
                                        </Style>
                                    </MenuItem.ItemContainerStyle>
                                </MenuItem>
                                <MenuItem Header="{Binding Resources.Command_OpenParentDirectory, Source={x:Static models:ResourceService.Instance}, Mode=OneWay}" Visibility="{qc:Binding '!$P ? Visibility.Visible : Visibility.Collapsed', P={Binding ActiveEditor.IsNewFile, Mode=OneWay}}">
                                    <i:Interaction.Triggers>
                                        <i:EventTrigger EventName="Click">
                                            <mlwb:ProcessStartAction FileName="explorer.exe" Argument="{qc:Binding '\'/select, \' + $P', P={Binding ActiveEditor.FileName, Mode=OneWay}}"/>
                                        </i:EventTrigger>
                                    </i:Interaction.Triggers>
                                    <MenuItem.Icon>
                                        <mi:Material Kind="FolderOpen"/>
                                    </MenuItem.Icon>
                                </MenuItem>
                            </ContextMenu>
                        </dr:TabablzControl.ContextMenu>
                        <dr:TabablzControl.ContentTemplate>
                            <DataTemplate>
                                <components:TextEditor x:Name="TextEditor" DataContext="{Binding Mode=OneWay}">
                                    <i:Interaction.Triggers>
                                        <i:EventTrigger EventName="Loaded">
                                            <mlwb:CallElementMethodAction MethodName="Focus"/>
                                            <mlwb:CallElementMethodAction MethodName="Redraw"/>
                                        </i:EventTrigger>
                                    </i:Interaction.Triggers>
                                    <components:TextEditor.Style>
                                        <Style TargetType="{x:Type components:TextEditor}" BasedOn="{StaticResource Default.TextEditor}">
                                            <EventSetter Event="PreviewKeyDown" Handler="TextEditor_PreviewKeyDown"/>
                                            <Setter Property="Settings"         Value="{Binding TextEditor, Source={x:Static models:SettingsService.Instance}, Mode=OneWay}"/>
                                            <Setter Property="Document"         Value="{Binding Document, Mode=OneWay}"/>
                                            <Setter Property="IsReadOnly"       Value="{Binding IsReadOnly, Mode=TwoWay}"/>
                                            <Setter Property="IsModified"       Value="{Binding IsModified, Mode=TwoWay}"/>
                                            <Setter Property="SyntaxDefinition" Value="{Binding SyntaxDefinition, Mode=TwoWay}"/>
                                            <Setter Property="OverstrikeMode"   Value="{Binding OverstrikeMode, Mode=TwoWay}"/>
                                            <Setter Property="Line"             Value="{Binding Line, Mode=TwoWay}"/>
                                            <Setter Property="Column"           Value="{Binding Column, Mode=TwoWay}"/>
                                            <Setter Property="VisualColumn"     Value="{Binding VisualColumn, Mode=TwoWay}"/>
                                            <Setter Property="mlwm:PushBindingManager.StylePushBindings">
                                                <Setter.Value>
                                                    <mlwm:PushBindingCollection>
                                                        <mlwm:PushBinding TargetProperty="ActualFontSize"       Path="ActualFontSize"/>
                                                        <mlwm:PushBinding TargetProperty="ZoomIncrement"        Path="ZoomIncrement"/>
                                                        <mlwm:PushBinding TargetProperty="VisualLength"         Path="VisualLength"/>
                                                        <mlwm:PushBinding TargetProperty="TextLength"           Path="TextLength"/>
                                                        <mlwm:PushBinding TargetProperty="SelectionLength"      Path="SelectionLength"/>
                                                        <mlwm:PushBinding TargetProperty="SelectionStart"       Path="SelectionStart"/>
                                                        <mlwm:PushBinding TargetProperty="SelectionEnd"         Path="SelectionEnd"/>
                                                        <mlwm:PushBinding TargetProperty="SelectionStartLine"   Path="SelectionStartLine"/>
                                                        <mlwm:PushBinding TargetProperty="SelectionEndLine"     Path="SelectionEndLine"/>
                                                        <mlwm:PushBinding TargetProperty="SelectionLineCount"   Path="SelectionLineCount"/>
                                                        <mlwm:PushBinding TargetProperty="SelectedText"         Path="SelectedText"/>
                                                        <mlwm:PushBinding TargetProperty="CharName"             Path="CharName"/>
                                                        <mlwm:PushBinding TargetProperty="IsAtEndOfLine"        Path="IsAtEndOfLine"/>
                                                        <mlwm:PushBinding TargetProperty="IsInVirtualSpace"     Path="IsInVirtualSpace"/>
                                                        <mlwm:PushBinding TargetProperty="EnableAutoCompletion" Path="EnableAutoCompletion"/>
                                                    </mlwm:PushBindingCollection>
                                                </Setter.Value>
                                            </Setter>
                                        </Style>
                                    </components:TextEditor.Style>
                                    <components:TextEditor.Resources>
                                        <Style TargetType="{x:Type ae:SearchPanel}" BasedOn="{StaticResource Default.SearchPanel}">
                                            <Setter Property="Localization" Value="{Binding Localization, RelativeSource={RelativeSource AncestorType={x:Type Window}}, Mode=OneWay}"/>
                                        </Style>
                                    </components:TextEditor.Resources>
                                    <components:TextEditor.ContextMenu>
                                        <ContextMenu>
                                            <MenuItem Command="Undo" Header="{Binding Resources.Command_Undo, Source={x:Static models:ResourceService.Instance}, Mode=OneWay}">
                                                <MenuItem.Icon>
                                                    <mi:Modern Kind="UndoCurve"/>
                                                </MenuItem.Icon>
                                            </MenuItem>
                                            <MenuItem Command="Redo" Header="{Binding Resources.Command_Redo, Source={x:Static models:ResourceService.Instance}, Mode=OneWay}">
                                                <MenuItem.Icon>
                                                    <mi:Modern Kind="RedoCurve"/>
                                                </MenuItem.Icon>
                                            </MenuItem>
                                            <Separator/>
                                            <MenuItem Command="Cut" Header="{Binding Resources.Command_Cut, Source={x:Static models:ResourceService.Instance}, Mode=OneWay}">
                                                <MenuItem.Icon>
                                                    <mi:Modern Kind="Scissor"/>
                                                </MenuItem.Icon>
                                            </MenuItem>
                                            <MenuItem Command="Copy" Header="{Binding Resources.Command_Copy, Source={x:Static models:ResourceService.Instance}, Mode=OneWay}">
                                                <MenuItem.Icon>
                                                    <mi:Modern Kind="PageCopy"/>
                                                </MenuItem.Icon>
                                            </MenuItem>
                                            <MenuItem Command="Paste" Header="{Binding Resources.Command_Paste, Source={x:Static models:ResourceService.Instance}, Mode=OneWay}">
                                                <MenuItem.Icon>
                                                    <mi:Modern Kind="ClipboardPaste"/>
                                                </MenuItem.Icon>
                                            </MenuItem>
                                            <MenuItem Command="EditingCommands.Delete" Header="{Binding Resources.Command_Delete, Source={x:Static models:ResourceService.Instance}, Mode=OneWay}" InputGestureText="Del">
                                                <MenuItem.Icon>
                                                    <mi:Material Kind="Eraser"/>
                                                </MenuItem.Icon>
                                            </MenuItem>
                                            <MenuItem Command="SelectAll" Header="{Binding Resources.Command_SelectAll, Source={x:Static models:ResourceService.Instance}, Mode=OneWay}">
                                                <MenuItem.Icon>
                                                    <mi:Modern Kind="CursorDefault"/>
                                                </MenuItem.Icon>
                                            </MenuItem>
                                            <Separator/>
                                            <MenuItem Header="{Binding Resources.Command_Movement, Source={x:Static models:ResourceService.Instance}, Mode=OneWay}">
                                                <MenuItem Command="EditingCommands.MoveLeftByWord"      Header="{Binding Resources.Command_MoveLeftByWord, Source={x:Static models:ResourceService.Instance}, Mode=OneWay}" InputGestureText="Ctrl+Left"/>
                                                <MenuItem Command="EditingCommands.MoveRightByWord"     Header="{Binding Resources.Command_MoveRightByWord, Source={x:Static models:ResourceService.Instance}, Mode=OneWay}" InputGestureText="Ctrl+Right"/>
                                                <MenuItem Command="EditingCommands.MoveToLineStart"     Header="{Binding Resources.Command_MoveToLineStart, Source={x:Static models:ResourceService.Instance}, Mode=OneWay}" InputGestureText="Home"/>
                                                <MenuItem Command="EditingCommands.MoveToLineEnd"       Header="{Binding Resources.Command_MoveToLineEnd, Source={x:Static models:ResourceService.Instance}, Mode=OneWay}" InputGestureText="End"/>
                                                <MenuItem Command="EditingCommands.MoveUpByPage"        Header="{Binding Resources.Command_MoveUpByPage, Source={x:Static models:ResourceService.Instance}, Mode=OneWay}" InputGestureText="PageUp"/>
                                                <MenuItem Command="EditingCommands.MoveDownByPage"      Header="{Binding Resources.Command_MoveDownByPage, Source={x:Static models:ResourceService.Instance}, Mode=OneWay}" InputGestureText="PageDown"/>
                                                <MenuItem Command="EditingCommands.MoveToDocumentStart" Header="{Binding Resources.Command_MoveToDocumentStart, Source={x:Static models:ResourceService.Instance}, Mode=OneWay}" InputGestureText="Ctrl+Home"/>
                                                <MenuItem Command="EditingCommands.MoveToDocumentEnd"   Header="{Binding Resources.Command_MoveToDocumentEnd, Source={x:Static models:ResourceService.Instance}, Mode=OneWay}" InputGestureText="Ctrl+End"/>
                                            </MenuItem>
                                            <MenuItem Header="{Binding Resources.Command_Selection, Source={x:Static models:ResourceService.Instance}, Mode=OneWay}">
                                                <MenuItem Command="EditingCommands.SelectLeftByWord"      Header="{Binding Resources.Command_SelectLeftByWord, Source={x:Static models:ResourceService.Instance}, Mode=OneWay}" InputGestureText="Ctrl+Shift+Left"/>
                                                <MenuItem Command="EditingCommands.SelectRightByWord"     Header="{Binding Resources.Command_SelectRightByWord, Source={x:Static models:ResourceService.Instance}, Mode=OneWay}" InputGestureText="Ctrl+Shift+Right"/>
                                                <MenuItem Command="EditingCommands.SelectToLineStart"     Header="{Binding Resources.Command_SelectToLineStart, Source={x:Static models:ResourceService.Instance}, Mode=OneWay}" InputGestureText="Shift+Home"/>
                                                <MenuItem Command="EditingCommands.SelectToLineEnd"       Header="{Binding Resources.Command_SelectToLineEnd, Source={x:Static models:ResourceService.Instance}, Mode=OneWay}" InputGestureText="Shift+End"/>
                                                <MenuItem Command="EditingCommands.SelectUpByPage"        Header="{Binding Resources.Command_SelectUpByPage, Source={x:Static models:ResourceService.Instance}, Mode=OneWay}" InputGestureText="Shift+PageUp"/>
                                                <MenuItem Command="EditingCommands.SelectDownByPage"      Header="{Binding Resources.Command_SelectDownByPage, Source={x:Static models:ResourceService.Instance}, Mode=OneWay}" InputGestureText="Shift+PageDown"/>
                                                <MenuItem Command="EditingCommands.SelectToDocumentStart" Header="{Binding Resources.Command_SelectToDocumentStart, Source={x:Static models:ResourceService.Instance}, Mode=OneWay}" InputGestureText="Ctrl+Shift+Home"/>
                                                <MenuItem Command="EditingCommands.SelectToDocumentEnd"   Header="{Binding Resources.Command_SelectToDocumentEnd, Source={x:Static models:ResourceService.Instance}, Mode=OneWay}" InputGestureText="Ctrl+Shift+End"/>
                                            </MenuItem>
                                            <MenuItem Header="{Binding Resources.Command_Formatting, Source={x:Static models:ResourceService.Instance}, Mode=OneWay}">
                                                <MenuItem Command="components:TextEditorCommands.ConvertToNarrow" Header="{Binding Resources.Command_ConvertToNarrow, Source={x:Static models:ResourceService.Instance}, Mode=OneWay}"/>
                                                <MenuItem Command="components:TextEditorCommands.ConvertToWide"   Header="{Binding Resources.Command_ConvertToWide, Source={x:Static models:ResourceService.Instance}, Mode=OneWay}"/>
                                                <Separator/>
                                                <MenuItem Command="ae:AvalonEditCommands.ConvertToLowercase" Header="{Binding Resources.Command_ConvertToLowerCase, Source={x:Static models:ResourceService.Instance}, Mode=OneWay}"/>
                                                <MenuItem Command="ae:AvalonEditCommands.ConvertToUppercase" Header="{Binding Resources.Command_ConvertToUpperCase, Source={x:Static models:ResourceService.Instance}, Mode=OneWay}"/>
                                                <MenuItem Command="ae:AvalonEditCommands.ConvertToTitleCase" Header="{Binding Resources.Command_ConvertToTitleCase, Source={x:Static models:ResourceService.Instance}, Mode=OneWay}"/>
                                                <Separator/>
                                                <MenuItem Command="ae:AvalonEditCommands.ConvertTabsToSpaces" Header="{Binding Resources.Command_ConvertTabsToSpaces, Source={x:Static models:ResourceService.Instance}, Mode=OneWay}"/>
                                                <MenuItem Command="ae:AvalonEditCommands.ConvertSpacesToTabs" Header="{Binding Resources.Command_ConvertSpacesToTabs, Source={x:Static models:ResourceService.Instance}, Mode=OneWay}"/>
                                            </MenuItem>
                                        </ContextMenu>
                                    </components:TextEditor.ContextMenu>
                                </components:TextEditor>
                            </DataTemplate>
                        </dr:TabablzControl.ContentTemplate>
                    </components:DraggableTabControl>

                    <GridSplitter x:Name="ContentSplitter" Grid.Row="1" Height="{StaticResource Const.Gap1}" Visibility="{qc:Binding '$P ? Visibility.Visible : Visibility.Collapsed', P={Binding IsVisibleTerminalContent, RelativeSource={RelativeSource AncestorType={x:Type Window}}, Mode=OneWay}}" DragCompleted="ContentSplitter_DragCompleted"/>

                    <!-- ターミナル -->
                    <components:DraggableTabControl x:Name="TerminalTabControl"
                                                    Grid.Row="2"
                                                    Visibility="{qc:Binding '$P ? Visibility.Visible : Visibility.Collapsed', P={Binding IsVisibleTerminalContent, RelativeSource={RelativeSource AncestorType={x:Type Window}}, Mode=OneWay}}"
                                                    ItemsSource="{Binding Terminals, Mode=OneWay}"
                                                    SelectedItem="{Binding ActiveTerminal, Mode=TwoWay}"
                                                    NewItemFactory="{Binding TerminalFactory, Mode=OneWay}"
                                                    ClosingItemCallback="{Binding ClosingTerminalHandler, Mode=OneTime}"
                                                    SelectionChanged="TerminalTabControl_SelectionChanged">
                        <dr:TabablzControl.ItemContainerStyle>
                            <Style TargetType="{x:Type dr:DragablzItem}" BasedOn="{StaticResource Default.DragablzItem}">
                                <EventSetter Event="MouseRightButtonDown" Handler="TabItem_MouseRightButtonDown"/>
                                <Style.Triggers>
                                    <MultiDataTrigger>
                                        <MultiDataTrigger.Conditions>
                                            <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}, Mode=OneWay}" Value="True"/>
                                        </MultiDataTrigger.Conditions>
                                        <Setter Property="Background" Value="{DynamicResource AccentColorBrush4}"/>
                                    </MultiDataTrigger>
                                    <MultiDataTrigger>
                                        <MultiDataTrigger.Conditions>
                                            <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}, Mode=OneWay}" Value="True"/>
                                        </MultiDataTrigger.Conditions>
                                        <Setter Property="Background" Value="{DynamicResource AccentColorBrush3}"/>
                                    </MultiDataTrigger>
                                </Style.Triggers>
                            </Style>
                        </dr:TabablzControl.ItemContainerStyle>
                        <dr:TabablzControl.HeaderItemTemplate>
                            <DataTemplate>
                                <TextBlock DataContext="{Binding Mode=OneWay}" Text="{Binding TerminalName, Mode=OneWay}"/>
                            </DataTemplate>
                        </dr:TabablzControl.HeaderItemTemplate>
                        <dr:TabablzControl.HeaderSuffixContent>
                            <Grid ge:GridEx.ColumnDefinition="Auto, *" Margin="5,0,0,0">
                                <Button Grid.Column="0" Command="{x:Static dr:TabablzControl.AddItemCommand}" Style="{StaticResource TabItemButton}" Focusable="False">
                                    <mi:Material Kind="Plus" Height="12" Width="12"/>
                                </Button>
                                <Border Grid.Column="1" ContextMenu="{StaticResource ContextMenu}">
                                    <TextBlock VerticalAlignment="Stretch"/>
                                </Border>
                            </Grid>
                        </dr:TabablzControl.HeaderSuffixContent>
                        <dr:TabablzControl.ContextMenu>
                            <ContextMenu>
                                <MenuItem Command="{Binding CloseTerminalCommand, Mode=OneTime}" Header="{Binding Resources.Command_Close, Source={x:Static models:ResourceService.Instance}, Mode=OneWay}">
                                    <MenuItem.Icon>
                                        <mi:Material Kind="Close"/>
                                    </MenuItem.Icon>
                                </MenuItem>
                                <MenuItem Command="{Binding CloseAllTerminalCommand, Mode=OneTime}" Header="{Binding Resources.Command_CloseAll, Source={x:Static models:ResourceService.Instance}, Mode=OneWay}">
                                    <MenuItem.Icon>
                                        <mi:Modern Kind="LayerDelete"/>
                                    </MenuItem.Icon>
                                </MenuItem>
                                <MenuItem Command="{Binding CloseOtherTerminalCommand, Mode=OneTime}" Header="{Binding Resources.Command_CloseOther, Source={x:Static models:ResourceService.Instance}, Mode=OneWay}"/>
                                <MenuItem ItemsSource="{Binding Terminals, Mode=OneWay}" Header="{Binding Resources.Command_Terminals, Source={x:Static models:ResourceService.Instance}, Mode=OneWay}" IsEnabled="{qc:Binding '$P.CompareTo(0) == 1', P={Binding Terminals.Count}}">
                                    <MenuItem.ItemContainerStyle>
                                        <Style TargetType="{x:Type MenuItem}" BasedOn="{StaticResource Default.MenuItem}">
                                            <Setter Property="Header" Value="{Binding TerminalName, Mode=OneWay}"/>
                                            <Setter Property="Command" Value="{Binding DataContext.ActivateTerminalCommand, RelativeSource={RelativeSource AncestorType={x:Type Window}}, Mode=OneTime}"/>
                                            <Setter Property="CommandParameter" Value="{Binding Mode=OneWay}"/>
                                        </Style>
                                    </MenuItem.ItemContainerStyle>
                                </MenuItem>
                            </ContextMenu>
                        </dr:TabablzControl.ContextMenu>
                        <dr:TabablzControl.InputBindings>
                            <KeyBinding Command="{Binding AddTerminalCommand, Mode=OneTime}" Key="OemTilde" Modifiers="Ctrl+Shift"/>
                        </dr:TabablzControl.InputBindings>
                        <dr:TabablzControl.ContentTemplate>
                            <DataTemplate>
                                <Grid ge:GridEx.RowDefinition="*, Auto">
                                    <TextBox Grid.Row="0" Text="{Binding DataLinesText, Mode=OneWay}" Style="{StaticResource ReadOnlyTextBox}" BorderThickness="0">
                                        <i:Interaction.Triggers>
                                            <i:EventTrigger EventName="TextChanged">
                                                <mlwb:CallElementMethodAction MethodName="ScrollToEnd"/>
                                            </i:EventTrigger>
                                        </i:Interaction.Triggers>
                                    </TextBox>
                                    <Grid Grid.Row="1" ge:GridEx.ColumnDefinition="Auto, *">
                                        <Label Grid.Column="0" Content="{Binding LastLine, Mode=OneWay}"/>
                                        <ComboBox Grid.Column="1" x:Name="CommandBox"
                                                  ItemsSource="{Binding Histories, Mode=OneWay}"
                                                  Text="{Binding Value, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}"
                                                  m:TextBoxHelper.Watermark="{Binding Resources.Label_Command, Source={x:Static models:ResourceService.Instance}, Mode=OneWay}"
                                                  IsReadOnly="{Binding IsWorking, Mode=OneWay}"
                                                  IsEditable="True"
                                                  BorderThickness="0">
                                            <i:Interaction.Triggers>
                                                <ei:KeyTrigger ActiveOnFocus="True" Key="Return">
                                                    <p:InvokeCommandAction Command="{Binding SendValueCommand, Mode=OneTime}"/>
                                                </ei:KeyTrigger>
                                            </i:Interaction.Triggers>
                                        </ComboBox>
                                    </Grid>
                                    <Border d:IsHidden="True" Grid.RowSpan="2" Style="{StaticResource Common.Overlay}" Visibility="{qc:Binding '$P ? Visibility.Visible : Visibility.Collapsed', P={Binding IsWorking, Mode=OneWay}}">
                                        <m:MetroProgressBar VerticalAlignment="Center"/>
                                    </Border>
                                </Grid>
                            </DataTemplate>
                        </dr:TabablzControl.ContentTemplate>
                    </components:DraggableTabControl>
                </Grid>
            </Grid>
            
            <!-- ステータスバー -->
            <StatusBar Grid.Row="2">
                <StatusBar.ItemsPanel>
                    <ItemsPanelTemplate>
                        <Grid ge:GridEx.ColumnDefinition="*, Auto, Auto, Auto, Auto, Auto, 5"/>
                    </ItemsPanelTemplate>
                </StatusBar.ItemsPanel>
                <StatusBarItem Grid.Column="0" DataContext="{Binding ActiveEditor, Mode=OneWay}">
                    <TextBlock Text="{qc:MultiBinding '$P0 + \' chars (\' + $P1 + \' lines) selected\'', P0={Binding SelectionLength, Mode=OneWay}, P1={Binding SelectionLineCount, Mode=OneWay}}" Visibility="{qc:Binding '$P == 0 ? Visibility.Collapsed : Visibility.Visible', P={Binding SelectionLength, Mode=OneWay}}"/>
                </StatusBarItem>
                <StatusBarItem Grid.Column="1" DataContext="{Binding ActiveEditor, Mode=OneWay}">
                    <ToggleButton Command="{x:Static views:MainWindow.ActivateProperty}">
                        <ToggleButton.Content>
                            <TextBlock Text="{qc:MultiBinding '\'Lines \' + $P0 + \' - Length \' + $P1 + \' (\' + $P2 + \')\'', P0={Binding Document.LineCount, Mode=OneWay}, P1={Binding TextLength, Mode=OneWay}, P2={Binding VisualLength, Mode=OneWay}}"/>
                        </ToggleButton.Content>
                    </ToggleButton>
                </StatusBarItem>
                <StatusBarItem Grid.Column="2" DataContext="{Binding ActiveEditor, Mode=OneWay}">
                    <ToggleButton Click="{qc:QuickEvent '$GoToLineFlyout.IsOpen = true'}">
                        <ToggleButton.Content>
                            <TextBlock Text="{qc:MultiBinding '\'Ln \' + $P0 + \' - Col \' + $P1 + \' (\' + $P2 + \')\'', P0={Binding Line, Mode=OneWay}, P1={Binding Column, Mode=OneWay}, P2={Binding CharName, Mode=OneWay}}"/>
                        </ToggleButton.Content>
                    </ToggleButton>
                </StatusBarItem>
                <StatusBarItem Grid.Column="3" DataContext="{Binding ActiveEditor, Mode=OneWay}">
                    <!-- ViewModel とコードビハインドで帳尻合わせするため Mode=OneWay で -->
                    <ComboBox x:Name="EncodingComboBox" ItemsSource="{x:Static root:Consts.ENCODINGS}" SelectedValue="{Binding Encoding, Mode=OneWay}" SelectionChanged="StatusComboBox_SelectionChanged">
                        <ComboBox.ItemTemplate>
                            <DataTemplate>
                                <TextBlock Text="{qc:MultiBinding '$P0 + \' - \' + $P1', P0={Binding CodePage, Mode=OneWay}, P1={Binding EncodingName, Mode=OneWay}}"/>
                            </DataTemplate>
                        </ComboBox.ItemTemplate>
                    </ComboBox>
                </StatusBarItem>
                <StatusBarItem Grid.Column="4" DataContext="{Binding ActiveEditor, Mode=OneWay}">
                    <!-- ViewModel とコードビハインドで帳尻合わせするため Mode=OneWay で -->
                    <ComboBox x:Name="LanguageComboBox" ItemsSource="{qc:Binding 'new string\[\] { string.Empty }.Concat($P.Keys)', P={Binding Source={x:Static root:Consts.SYNTAX_DEFINITIONS}, Mode=OneWay}}" SelectedValue="{Binding SyntaxDefinition.Name, Mode=OneWay}" m:TextBoxHelper.Watermark="Plain Text" SelectionChanged="StatusComboBox_SelectionChanged"/>
                </StatusBarItem>
                <StatusBarItem Grid.Column="5" DataContext="{Binding ActiveEditor, Mode=OneWay}">
                    <ToggleButton IsChecked="{Binding OverstrikeMode, Mode=TwoWay}" Content="{qc:Binding '$P ? \'OVER\' : \'INS\'', P={Binding OverstrikeMode, Mode=OneWay}}"/>
                </StatusBarItem>
            </StatusBar>
        </Grid>

        <Border d:IsHidden="True" Style="{StaticResource Common.Overlay}" Visibility="{qc:Binding '$P ? Visibility.Visible : Visibility.Collapsed', P={Binding IsWorking, Mode=OneWay}}">
            <StackPanel HorizontalAlignment="Stretch" VerticalAlignment="Center" Margin="{StaticResource Const.Gap1W}">
                <TextBlock Text="{Binding Resources.Message_Working, Source={x:Static models:ResourceService.Instance}, Mode=OneWay}"/>
                <Border Height="{StaticResource Const.Gap2}"/>
                <m:ProgressRing/>
            </StackPanel>
        </Border>
    </Grid>

    <!-- フライアウト -->
    <m:MetroWindow.Flyouts>
        <m:FlyoutsControl>
            <m:FlyoutsControl.Resources>
                <Thickness x:Key="Flyout.Margin" Left="10" Right="10" Bottom="20"/>
                <Style TargetType="{x:Type m:Flyout}" BasedOn="{StaticResource Default.Flyout}">
                    <EventSetter Event="IsOpenChanged" Handler="Flyout_IsOpenChanged"/>
                </Style>
            </m:FlyoutsControl.Resources>

            <!-- 指定行へ移動 -->
            <m:Flyout x:Name="GoToLineFlyout" Position="Bottom" BorderBrush="{StaticResource VSColorBrush}" BorderThickness="1" Header="{Binding Resources.Command_GoToLine, Source={x:Static models:ResourceService.Instance}, Mode=OneWay}">
                <i:Interaction.Behaviors>
                    <behaviors:FlyoutBehavior CloseByEsc="True"/>
                </i:Interaction.Behaviors>
                <components:NumericUpDownEx x:Name="GoToLineInput"
                                            Margin="0,0,5,0"
                                            Background="Transparent" 
                                            BorderThickness="0"
                                            FontSize="{StaticResource FlyoutHeaderFontSize}"
                                            DataContext="{Binding ActiveEditor, Mode=OneWay}"
                                            Value="{Binding Line, Mode=TwoWay}"
                                            Minimum="1"
                                            Maximum="{Binding Document.LineCount, Mode=OneWay}"
                                            ReverseOnMouseWheel="True"
                                            ValueChanged="GoToLineInput_ValueChanged"/>
            </m:Flyout>

            <!-- 印刷 -->
            <m:Flyout x:Name="PrintFlyout" Position="Left" Header="{Binding Resources.Command_Print, Source={x:Static models:ResourceService.Instance}, Mode=OneWay}">
                <i:Interaction.Behaviors>
                    <behaviors:FlyoutBehavior CloseByEsc="True"/>
                </i:Interaction.Behaviors>
                <i:Interaction.Triggers>
                    <ei:DataTrigger Binding="{Binding IsOpen, ElementName=PrintFlyout, Mode=OneWay}" Value="True">
                        <p:InvokeCommandAction Command="{Binding PrintPreviewCommand, Mode=OneTime}"/>
                    </ei:DataTrigger>
                </i:Interaction.Triggers>
                <views:PrintPreviewContent Margin="{StaticResource Flyout.Margin}"/>
            </m:Flyout>

            <!-- オプション -->
            <m:Flyout x:Name="OptionsFlyout" Position="Left" Header="{Binding Resources.Command_Options, Source={x:Static models:ResourceService.Instance}, Mode=OneWay}">
                <i:Interaction.Behaviors>
                    <behaviors:FlyoutBehavior CloseByEsc="True"/>
                </i:Interaction.Behaviors>
                <views:OptionsContent Margin="{StaticResource Flyout.Margin}"/>
            </m:Flyout>

            <!-- バージョン情報 -->
            <m:Flyout x:Name="AboutFlyout" Position="Left" Header="{Binding Resources.Command_About, Source={x:Static models:ResourceService.Instance}, Mode=OneWay}">
                <i:Interaction.Behaviors>
                    <behaviors:FlyoutBehavior CloseByEsc="True"/>
                </i:Interaction.Behaviors>
                <views:AboutContent Margin="{StaticResource Flyout.Margin}"/>
            </m:Flyout>
        </m:FlyoutsControl>
    </m:MetroWindow.Flyouts>
</m:MetroWindow>
